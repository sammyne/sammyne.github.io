(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{739:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("原文："),s("a",{attrs:{href:"https://blog.golang.org/module-compatibility",target:"_blank",rel:"noopener noreferrer"}},[t._v("Keeping Your Modules Compatible"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"引言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[t._v("#")]),t._v(" 引言")]),t._v(" "),s("p",[t._v("这是以下系列的第 5 部分：")]),t._v(" "),s("ul",[s("li",[t._v("第 1 部分 -- "),s("a",{attrs:{href:"https://blog.golang.org/using-go-modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 Go 模块"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("第 2 部分 -- "),s("a",{attrs:{href:"https://blog.golang.org/migrating-to-go-modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("迁移到 Go 模块"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("第 3 部分 -- "),s("a",{attrs:{href:"https://blog.golang.org/publishing-go-modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("发布 Go 模块"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("第 4 部分 -- "),s("a",{attrs:{href:"https://blog.golang.org/v2-go-modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 模块：v2 和更多"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("strong",[t._v("第 5 部分 -- 保持模块的兼容性")])])]),t._v(" "),s("p",[t._v("随着时间流逝，我们为我们的模块新添特性、改变行为和重构模块的公开接口等，推进模块不断演进。正如 Go 模块：v2 和更多所讨论，对 v1+ 版模块的破坏性变更必须作为一个大版本更变的一部分（或者采用一个新的模块路径）。")]),t._v(" "),s("p",[t._v("然而，发布新的大版本给我们的用户带来不少问题。他们必须找到新版本，学习新的 API，更新代码。一些用户可能永不更新，这也就意味着我们必须为此一直维护两个版本的代码。因此，以兼容的方式来变更已有的包通常是更加可取的。")]),t._v(" "),s("h2",{attrs:{id:"添加一个函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加一个函数"}},[t._v("#")]),t._v(" 添加一个函数")]),t._v(" "),s("p",[t._v("破坏性的变更通常表现为往一个函数添加新的参数。我们接下来会展示一些应对此类变更的方式，但是在此之前，先看个失败的方法。")]),t._v(" "),s("p",[t._v("对于要添加的新参数有明确的默认值时，我们通常倾向于将其添加为可变参数。为了拓展以下函数")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("添加一个默认值为 0 的额外变量 "),s("code",[t._v("size")]),t._v("，我们可能会尝试如下")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("因为这样一来，目前所有调用这个函数的地方依然能够继续工作。这方面是真的，但是其他使用 "),s("code",[t._v("Run")]),t._v(" 的地方就不一定了，例如：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" mypkg\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" runner "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" yourpkg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Run\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("旧的 "),s("code",[t._v("Run")]),t._v(" 函数能够在此正常运行时因为它的类型是 "),s("code",[t._v("func(string)")]),t._v("，但是新的 "),s("code",[t._v("Run")]),t._v(" 函数的类型伟 "),s("code",[t._v("func(string, ...int)")]),t._v("，因此，赋值操作就会编译阶段报错了。")]),t._v(" "),s("p",[t._v("这个例子说明调用兼容性不足以保持向后兼容。事实上，没有向后兼容的变更能够应用在函数的签名上。")]),t._v(" "),s("p",[t._v("与其改变函数签名，添加新函数式可行的。例如， "),s("code",[t._v("context")]),t._v(" 包添加到标准库之后，将 "),s("code",[t._v("context.Context")]),t._v(" 作为函数的第一个参数添加给函数是常见实践之一。但是，稳定的 API 不能改变已有的导出函数来接收一个 "),s("code",[t._v("context.Context")]),t._v("，否则就会破坏所有那个函数的地方。")]),t._v(" "),s("p",[t._v("所以，新函数被添加了出来。例如，"),s("code",[t._v("database/sql")]),t._v(" 包的 "),s("code",[t._v("Query")]),t._v(" 方法的签名为（目前依然是这样）：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("code",[t._v("context")]),t._v(" 包引入创建出来之后，Go 团队为 "),s("code",[t._v("database/sql")]),t._v(" 添加了如下新方法：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("QueryContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("为了避免复制代码，旧方法调用新方法：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Rows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("QueryContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Background")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("添加新方法允许用户按照自己的节奏迁移到新的 API。由于方法名接近会被排序方法一起，且 "),s("code",[t._v("Context")]),t._v(" 在方法名中，这种 "),s("code",[t._v("database/sql")]),t._v(" 的拓展方式没有降低包的可读性或理解容易度。")]),t._v(" "),s("p",[t._v("如果预见到未来这个函数还需要更多参数，我们可以提前规划好，用一个可选参数作为函数签名的一部分。最快实现方式之一是如 "),s("code",[t._v("crypto/tls.Dial")]),t._v(" 函数那样添加单个结构体参数：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("network"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" addr "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("code",[t._v("Dial")]),t._v(" 执行的 TLS 握手需要网络类型和地址，但它的许多其他参数都是有合理默认值的。传递值为 "),s("code",[t._v("nil")]),t._v(" 的 "),s("code",[t._v("config")]),t._v(" 是采用这些默认值；而传入设置了默写字段值的 "),s("code",[t._v("Config")]),t._v(" 结构体则会覆盖默写默认值。将来添加新的 TLS 配置参数只需要往 "),s("code",[t._v("Config")]),t._v(" 结构体添加新的字段，这是一个向后兼容的变更（几乎一直都是这样的--参见后续的“维护结构体的兼容性”）。")]),t._v(" "),s("p",[t._v("有时新添函数和添加选项的技巧可通过将选项设为方法接收者的方式结合起来使用。以 "),s("code",[t._v("net")]),t._v(" 包监听特定网络地址的不断演进为例。Go 1.11 之前，"),s("code",[t._v("net")]),t._v(" 包只提供一个如下签名的 "),s("code",[t._v("Listen")]),t._v(" 函数：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("network"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Listener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("到了 Go 1.11，两个新特性被添加到 "),s("code",[t._v("net")]),t._v(" 的监听：传入一个上下文 "),s("code",[t._v("context")]),t._v("，并允许调用者提供一个“控制函数”来在创建之后绑定之前调整裸连接。新接口可以是一个新函数接收一个 "),s("code",[t._v("context")]),t._v("、网络、地址和控制函数。但是包作者考虑到将来可能还需要更多选项，因此添加了一个 "),s("a",{attrs:{href:"https://pkg.go.dev/net@go1.11?tab=doc#ListenConfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("ListenConfig"),s("OutboundLink")],1),t._v(" 结构。预期定义一个名字冗长的底层函数，他们给 "),s("code",[t._v("ListenConfig")]),t._v(" 添加了一个 "),s("code",[t._v("Listen")]),t._v(" 方法：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ListenConfig "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Control "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("network"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c syscall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RawConn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ListenConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Listen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" network"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" address "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Listener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("另一种考虑未来添加新选项的方式是“选项类型”模式，这种模式下，选项作为可变参数传递，每个选项都是一个改变要创建值的状态的函数。具体细节在 Rob Pike 的博客 "),s("a",{attrs:{href:"https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Self-referential functions and the design of options"),s("OutboundLink")],1),t._v(" 有详细描述。一个常见样例是 "),s("a",{attrs:{href:"https://pkg.go.dev/google.golang.org/grpc?tab=doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("google.golang.org/grpc"),s("OutboundLink")],1),t._v(" 的 "),s("a",{attrs:{href:"https://pkg.go.dev/google.golang.org/grpc?tab=doc#DialOption",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("DialOption")]),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("选项类型在函数参数中充当和结构体选项一样的角色：它们是传递改变行为配置的一种可拓展的方法。选择哪种方式纯粹看个人所好。以这个 gRPC 选项类型的 "),s("code",[t._v("DialOption")]),t._v(" 的简单使用为例：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-target"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithAuthority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-authority"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithMaxDelay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithBlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("也可以改写为如下结构体选项：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("notgrpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-target"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("notgrpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Authority"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some-authority"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  MaxDelay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Minute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Block"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("函数式选项有些缺点：它们要求每次调用时都在选项前书写包名；它们增加了包命名空间的大小；而且如果提供两次的同一选项会触发的后果不明。而另一方面，函数的结构体选项通常为 "),s("code",[t._v("nil")]),t._v("，让一些人觉得不好看。一个类型的零值具有合法意义时，要规定选项应该使用其默认值是比较难搞的，通常需要一个指针或者额外的布尔值。")]),t._v(" "),s("p",[t._v("以上两种方式都是确保我们模块的公开 API 未来拓展性的理性选择。")]),t._v(" "),s("h2",{attrs:{id:"使用接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用接口"}},[t._v("#")]),t._v(" 使用接口")]),t._v(" "),s("p",[t._v("有时，新特性要求改变公开的接口：例如，一个接口需要添加新方法。直接往接口添加函数是破坏性的变更--这样的话，我们那要怎样才能支持这个公开的接口新添方法呢？")]),t._v(" "),s("p",[t._v("基本思想是定一个具有新方法的新接口，然后每处使用旧接口的地方，动态检查提供的类型是旧类型还是新类型。")]),t._v(" "),s("p",[t._v("让我们以 "),s("a",{attrs:{href:"https://pkg.go.dev/archive/tar?tab=doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("archive/tar"),s("OutboundLink")],1),t._v(" 包为例描述这种方法。"),s("a",{attrs:{href:"https://pkg.go.dev/archive/tar?tab=doc#NewReader",target:"_blank",rel:"noopener noreferrer"}},[t._v("tar.NewReader"),s("OutboundLink")],1),t._v(" 接收一个 "),s("code",[t._v("io.Reader")]),t._v("，但是随着时间推移，Go 团队发现如果能够调用 "),s("code",[t._v("Seek")]),t._v(" 从一个文件头部跳到下一个文件头部会更加高效。但是，他们又不能往 "),s("code",[t._v("io.Reader")]),t._v(" 添加 "),s("code",[t._v("Seek")]),t._v(" 方法：那样做的话会破坏所有实现 "),s("code",[t._v("io.Reader")]),t._v(" 的结构。")]),t._v(" "),s("p",[t._v("另一种不行的方式是让 "),s("code",[t._v("tar.NewReader")]),t._v(" 接收 "),s("a",{attrs:{href:"https://pkg.go.dev/io?tab=doc#ReadSeeker",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("io.ReadSeeker")]),s("OutboundLink")],1),t._v(" 而不是 "),s("code",[t._v("io.Reader")]),t._v("，这样可以同时支持 "),s("code",[t._v("io.Reader")]),t._v(" 的方法和 "),s("code",[t._v("Seek")]),t._v("（通过 "),s("code",[t._v("io.Seeker")]),t._v(" 的方式）。但是，我们前面也看到，改变函数签名时破坏性的更变。")]),t._v(" "),s("p",[t._v("因此，它们觉得保持 "),s("code",[t._v("tar.NewReader")]),t._v(" 的签名不变，但是在 "),s("code",[t._v("tar.Reader")]),t._v(" 的方法里面检查并支持传入的参数是 "),s("code",[t._v("io.Seeker")]),t._v(" 的类型的情形。")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" tar\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Reader "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  r io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Reader\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Reader "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Reader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" rs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Seeker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use more efficient rs.Seek.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use less efficient r.r.Read.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("（实际代码参见 "),s("a",{attrs:{href:"https://github.com/golang/go/blob/60f78765022a59725121d3b800268adffe78bde3/src/archive/tar/reader.go#L837",target:"_blank",rel:"noopener noreferrer"}},[t._v("reader.go"),s("OutboundLink")],1),t._v("）")]),t._v(" "),s("p",[t._v("但我们遇到这种需要往现有接口添加方法的情形时，可以采用这种策略。一开始先创建拥有新方法的新接口，或者找到具有新方法的现有接口。然后，分离需要支持新方法的相关函数，检查类型是否符合第二个接口，一旦符合则执行使用这个借口的代码。")]),t._v(" "),s("p",[t._v("这种策略只适用于缺乏新方法的旧接口被一直支持的情形，限制这我们模块的未来拓展性。")]),t._v(" "),s("p",[t._v("如果可能，最好能够完全避免这类问题。例如涉及构造函数时，偏向返回具体类型。使用具体类型允许我们将来添加函数而不惊扰用户，接口就不一定能做到。这个属性允许将来我们的模块被更好地拓展。")]),t._v(" "),s("p",[t._v("温馨提示：如果你需要使用一个接口，这个接口不准备允许用户实现，这时我们可以添加一个非导出的方法。这样做可以防止定义在我们包外的类型在没有使用内嵌的情况下满足我们的接口，让我们以后能够添加方法而不会破坏用户的实现。例如，"),s("a",{attrs:{href:"https://github.com/golang/go/blob/83b181c68bf332ac7948f145f33d128377a09c42/src/testing/testing.go#L564-L567",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("testing.TB")]),t._v(" 的 "),s("code",[t._v("private()")]),s("OutboundLink")],1),t._v(" 方法：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TB "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A private method to prevent users implementing the")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// interface and so future additions to it will not")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// violate Go 1 compatibility.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("private")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("这个话题在 Jonathan Amsterdam 的 Detecting Incompatible API Changes 的演讲中也有细节描述（"),s("a",{attrs:{href:"https://www.youtube.com/watch?v=JhdL5AkH-AQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("视频"),s("OutboundLink")],1),t._v("，"),s("a",{attrs:{href:"https://github.com/gophercon/2019-talks/blob/master/JonathanAmsterdam-DetectingIncompatibleAPIChanges/slides.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("幻灯片"),s("OutboundLink")],1),t._v("）。")]),t._v(" "),s("h2",{attrs:{id:"添加配置方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加配置方法"}},[t._v("#")]),t._v(" 添加配置方法")]),t._v(" "),s("p",[t._v("到目前为止，我们讨论的都是明显的破坏性变更，这种变更会改变某个类型或函数导致用户代码编译失败。然而，行为变更也是破坏用户代码，即使用户代码能够继续编译。例如，许多用户希望 "),s("a",{attrs:{href:"https://pkg.go.dev/encoding/json?tab=doc#Decoder",target:"_blank",rel:"noopener noreferrer"}},[t._v("json.Decoder"),s("OutboundLink")],1),t._v(" 忽略 JSON 字符串中没有在参数结构体里面出现的字段。当 Go 团队想要为这种情况返回错误时，他们必须小心翼翼。如果没有提供一个主动选择的机制而直接返回错误，许多依赖这个方法的用户可能开始收到之前一直没有碰到的错误。")]),t._v(" "),s("p",[t._v("因此，与其为所有用户改变行为，他们给 "),s("code",[t._v("Decoder")]),t._v(" 结构体添加了一个配置方法："),s("a",{attrs:{href:"https://pkg.go.dev/encoding/json?tab=doc#Decoder.DisallowUnknownFields",target:"_blank",rel:"noopener noreferrer"}},[t._v("Decoder.DisallowUnknownFields"),s("OutboundLink")],1),t._v("。调用这个方法让用户主动选择新的行为，反之则为现有用户保持旧的行为。")]),t._v(" "),s("h2",{attrs:{id:"维持结构体的兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#维持结构体的兼容性"}},[t._v("#")]),t._v(" 维持结构体的兼容性")]),t._v(" "),s("p",[t._v("综上可见，函数签名的任何改变都是破坏性的变更。对于结构体的话，情况要好一些。如果我们有一个导出的结构体类型，我们几乎总是可以添加一个字段或者移除非导出字段而不会破坏兼容性。添加字段时，确保它的零值是有意义的，并且保持旧的行为，使得现有没有给这个字段赋值的代码能够继续工作。")]),t._v(" "),s("p",[t._v("之前由于作者认为以后可能会支持更多选项， 他们在 Go 1.11 往 "),s("code",[t._v("net")]),t._v(" 包引入了 "),s("code",[t._v("ListenConfig")]),t._v("。事实证明他们是正确的。在 Go 1.13，"),s("a",{attrs:{href:"https://pkg.go.dev/net@go1.13?tab=doc#ListenConfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("KeepAlive"),s("OutboundLink")],1),t._v(" 字段被添加进来用于允许关闭 keep-alive 或者改变它的时长。默认的零值维持了原有的启用默认时长的 keep-alive 特性。")]),t._v(" "),s("p",[t._v("这里还有一种隐晦的字段添加方式会出其不意地破坏用户代码。如果结构体的所有字段类型都是可比较的--即这些类型的值可以用 "),s("code",[t._v("==")]),t._v(" 和 "),s("code",[t._v("!=")]),t._v(" 比较，并且这些值用作 map 的键时，整个结构体类型都是可比较的。这种情况下，添加一个心得不可比较的字段会使得现有的整个结构体类型变得不可比较，破坏任何比较这个结构体类型的值的代码。")]),t._v(" "),s("p",[t._v("为了使得一个结构体可比较，不要往其添加任何不可比较的字段。我们可以写个简单的测试来验证这一点，或者借用即将发布的 "),s("a",{attrs:{href:"https://pkg.go.dev/golang.org/x/exp/cmd/gorelease?tab=doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("gorelease"),s("OutboundLink")],1),t._v(" 工具来检查这个问题。")]),t._v(" "),s("p",[t._v("为了一开始就禁止比较，确保结构体有一个不可比较的字段类型即可。它可能本来就有了--除切片、map 和函数外的类型都是可比较的--如果还没有的话，我们按以下方式添加一个：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Point "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        X "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n        Y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("code",[t._v("func()")]),t._v(" 类型是不可比较的，同时 0 长度的数组不会占用任何空间。我们可以定义一个类型来表明我们的意图：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" doNotCompare "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Point "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        doNotCompare\n        X "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n        Y "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("我们应该在结构体里面使用 "),s("code",[t._v("doNotCompare")]),t._v(" 吗？如果我们已经定义了用作指针的结构体--即它拥有指针方法，还可能有一个返回指针的构造函数 "),s("code",[t._v("NewXXX")]),t._v("--这时添加 "),s("code",[t._v("doNotCompare")]),t._v(" 就可能小题大作了。指针类型的用户是理解这种类型的每个值都是不同的：即如果他们想要比较两个值的话，他们应该直接比较指针。")]),t._v(" "),s("p",[t._v("如果我们想要定义像 "),s("code",[t._v("Point")]),t._v(" 例子那样直接用作值类型的结构体的话，通常情况下我们都是想要它是可比较的。对于我们不需要让值类型的结构体被比较的少数情况，添加一个 "),s("code",[t._v("doNotCompare")]),t._v(" 字段使得我们以后可以自由地改变结构体而无需担心破坏任何比较。缺点就是，这个类型无法用作 map 的键。")]),t._v(" "),s("h2",{attrs:{id:"结论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),s("p",[t._v("一开始从零开始设计 API 时，请仔细思考这份 API 应对以后新变更的可拓展程度。如果我们确实需要添加新特性，谨记规则：添加而不要改变或者删除，同时不要忘了例外情况--接口、函数参数和返回值是没法以向后兼容的方式添加的。")]),t._v(" "),s("p",[t._v("如果我们需要大幅度第改变我们的 API，或者一份 API 已经开始随着更多新特性的加入而偏离初衷，这时就应该引入新的大版本升级了。但是大多数情况下，实施一个向后兼容的变更是容易的且能够避免给我们的用户带来阵痛。")])])}),[],!1,null,null,null);s.default=e.exports}}]);