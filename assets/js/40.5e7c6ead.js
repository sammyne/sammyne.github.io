(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{595:function(a,s,e){a.exports=e.p+"assets/img/p-vs-m.22e6cbec.jpg"},777:function(a,s,e){"use strict";e.r(s);var t=e(6),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"什么是布隆过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是布隆过滤器"}},[a._v("#")]),a._v(" 什么是布隆过滤器")]),a._v(" "),t("p",[a._v("本质上布隆过滤器是一种数据结构，比较巧妙的"),t("strong",[a._v("概率型数据结构")]),a._v("，特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。")]),a._v(" "),t("p",[a._v("相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。")]),a._v(" "),t("h2",{attrs:{id:"实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),t("h3",{attrs:{id:"hashmap-的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的问题"}},[a._v("#")]),a._v(" HashMap 的问题")]),a._v(" "),t("p",[a._v("讲述布隆过滤器的原理之前，我们先思考一下：通常你判断某个元素是否存在用的是什么？应该蛮多人回答 HashMap 吧，确实可以将值映射到 HashMap 的 Key，然后可以在 "),t("code",[a._v("O(1)")]),a._v(" 的时间复杂度内返回结果，效率奇高。但是 HashMap 的实现也有缺点，例如存储容量占比高，考虑到负载因子的存在，通常空间是不能被用满的。一旦值很多，例如上亿的时候，HashMap 占据的内存大小就变得很可观了。")]),a._v(" "),t("p",[a._v("还比如说数据集存储在远程服务器，本地服务接受输入，而数据集非常大不可能一次性读进内存构建 HashMap 的时候，也会存在问题。")]),a._v(" "),t("h3",{attrs:{id:"布隆过滤器数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器数据结构"}},[a._v("#")]),a._v(" 布隆过滤器数据结构")]),a._v(" "),t("p",[a._v("布隆过滤器是一个比特向量或者说比特数组，长这样：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("+---+---+---+---+---+---+---+---+\n| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |\n+---+---+---+---+---+---+---+---+\n  1   2   3   4   5   6   7   8\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("如果要映射一个值到布隆过滤器，我们需要使用多个不同的哈希函数生成多个哈希值，并对每个生成的哈希值指向比特置 1。例如给定值 "),t("code",[a._v("baidu")]),a._v("，三个不同的哈希函数分别生成了哈希值 1、4、7，则上图转变为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  +-------+baidu+---------+\n  |       |               |\nHash1   Hash2           Hash3\n  |       |               |\n  v       v               v\n+-+-+---+-+-+---+---+---+-+-+---+\n| 1 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |\n+---+---+---+---+---+---+---+---+\n  1   2   3   4   5   6   7   8\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("Ok，我们现在再存一个值 "),t("code",[a._v("tencent")]),a._v("。如果哈希函数返回 3、4、8 的话，图继续变为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("          +-+tencent+---------+\n          |   +               |\n        Hash1 |               |\n          |   |             Hash3\n          | Hash2             |\n          |   |               |\n          v   v               v\n+---+---+-+-+-+-+---+---+---+-+-+\n| 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 |\n+---+---+---+---+---+---+---+---+\n  1   2   3   4   5   6   7   8\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("值得注意的是，4 这个比特由于两个值的哈希函数都返回了这个比特，因此它被覆盖了。现在如果想查询 "),t("code",[a._v("dianping")]),a._v(" 这个值是否存在，哈希函数返回 1、5、8三个值，结果我们发现 5 这个比特的值为 0，"),t("strong",[a._v("说明没有任何一个值映射到这个比特")]),a._v("，因此可以很确定地说 "),t("code",[a._v("dianping")]),a._v(" 这个值不存在。需要查询 "),t("code",[a._v("baidu")]),a._v(" 这个值是否存在的话，哈希函数必然会返回 1、4、7，然后检查发现这三个比特的值均为 1，那么可以说 "),t("code",[a._v("baidu")]),a._v(" 存在了么？答案是不可以，"),t("strong",[a._v("只能是 "),t("code",[a._v("baidu")]),a._v(" 这个值可能存在")]),a._v("。")]),a._v(" "),t("p",[a._v("这是为什么呢？答案很简单：因为随着增加的值越来越多，被置为 1 的比特也会越来越多。这样某个值 "),t("code",[a._v("taobao")]),a._v(" 即使没有被存储过，但是万一哈希函数返回的三个比特都被其他值置为了 1 ，那么程序还是会判断 "),t("code",[a._v("taobao")]),a._v(" 这个值存在。")]),a._v(" "),t("h2",{attrs:{id:"不支持删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不支持删除"}},[a._v("#")]),a._v(" 不支持删除")]),a._v(" "),t("p",[a._v("感谢评论区提醒，传统的布隆过滤器并不支持删除操作。但是名为 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Counting_Bloom_filter",target:"_blank",rel:"noopener noreferrer"}},[a._v("Counting Bloom Filter"),t("OutboundLink")],1),a._v(" 的变种可以用来测试元素计数个数是否绝对小于某个阈值，它支持元素删除。")]),a._v(" "),t("h3",{attrs:{id:"如何选择哈希函数个数和布隆过滤器长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选择哈希函数个数和布隆过滤器长度"}},[a._v("#")]),a._v(" 如何选择哈希函数个数和布隆过滤器长度")]),a._v(" "),t("p",[a._v("很显然，过小的布隆过滤器很快所有的比特均变成 1，那么查询任何值都会返回“可能存在”，起不到过滤的目的。布隆过滤器的长度会直接影响误报率，布隆过滤器越长其误报率越小。")]),a._v(" "),t("p",[a._v("另外，哈希函数的个数也需要权衡。个数越多则布隆过滤器比特置为 1 的速度越快，且布隆过滤器的效率越低；但是如果太少的话，报率会变高。")]),a._v(" "),t("p",[t("img",{attrs:{src:e(595),alt:""}})]),a._v(" "),t("p",[a._v("参数说明如下")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("k")]),a._v(" 为哈希函数个数")]),a._v(" "),t("li",[t("code",[a._v("m")]),a._v(" 为布隆过滤器长度")]),a._v(" "),t("li",[t("code",[a._v("n")]),a._v(" 为插入的元素个数")]),a._v(" "),t("li",[t("code",[a._v("p")]),a._v(" 为误报率")])]),a._v(" "),t("p",[a._v("如何选择适合业务的 "),t("code",[a._v("k")]),a._v(" 和 "),t("code",[a._v("m")]),a._v(" 值呢，这里直接贴一个公式：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("m = -n*ln(p)/(ln(2))^2\nk = m/n*ln(2)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("公式的推导在此不详述，因为对于使用来说并没有太大的意义。你让一个高中生来推会推得很快。"),t("code",[a._v("k")]),a._v(" 次哈希函数某一比特未被置为 1 的概率为 "),t("code",[a._v("(1-1/m)^k")]),a._v("。")]),a._v(" "),t("p",[a._v("插入 n 个元素后依旧为 0 的概率和为 1 的概率分别是 "),t("code",[a._v("(1-1/m)^(n*k)")]),a._v(" 和 "),t("code",[a._v("1-(1-1/m)^(n*k)")]),a._v("。")]),a._v(" "),t("p",[a._v("标明某个元素是否在集合所需的 "),t("code",[a._v("k")]),a._v(" 个位置都按照以上方法设置为 1，但是该方法可能会使算法错误地认为某一原本不在集合的元素却被检测为在该集合（False Positives），该概率由以下公式确定")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1-(1-1/m)^(n*k)]^k ~= (1-e^(-k*n/m))^k\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h2",{attrs:{id:"最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[a._v("#")]),a._v(" 最佳实践")]),a._v(" "),t("p",[a._v("常见的使用有：利用布隆过滤器减少磁盘 IO 或者网络请求。因为一旦一个值必定不存在的话，就可以不用进行后续昂贵的查询请求。")]),a._v(" "),t("p",[a._v("另外，既然你使用布隆过滤器来加速查找和判断是否存在，那么性能很低的哈希函数不是个好选择，推荐 MurmurHash、Fnv 这些。")]),a._v(" "),t("h3",{attrs:{id:"大-value-拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大-value-拆分"}},[a._v("#")]),a._v(" 大 Value 拆分")]),a._v(" "),t("p",[a._v("Redis 因其支持 "),t("code",[a._v("setbit")]),a._v(" 和 "),t("code",[a._v("getbit")]),a._v(" 操作，且纯内存性能高等特点，因此天然就可以作为布隆过滤器来使用。但是布隆过滤器的不当使用极易产生大 Value，增加 Redis 阻塞风险，因此生产成环境建议对体积庞大的布隆过滤器进行拆分。")]),a._v(" "),t("p",[a._v("拆分的形式方法多种多样，本质是不要将 Hash(Key) 之后的请求分散在多个节点的多个小 bitmap 上，而是应该拆分成多个小 bitmap 之后，对一个 Key 的所有哈希函数都落在这一个小 bitmap 上。（TODO：需要加深理解）")]),a._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[a._v("#")]),a._v(" 参考文献")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/43263751?utm_source=wechat_session&utm_medium=social&utm_oi=1101038901967372288&utm_campaign=shareopn",target:"_blank",rel:"noopener noreferrer"}},[a._v("详解布隆过滤器的原理，使用场景和注意事项"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);