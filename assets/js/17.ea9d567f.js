(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{564:function(s,t,a){s.exports=a.p+"assets/img/bump-allocation.2ccd93fd.svg"},565:function(s,t,a){s.exports=a.p+"assets/img/allocation-fragmentation.5df3f1a4.svg"},566:function(s,t,a){s.exports=a.p+"assets/img/linked-list-allocation.14df6543.svg"},567:function(s,t,a){s.exports=a.p+"assets/img/linked-list-allocator-push.deacd00b.svg"},568:function(s,t,a){s.exports=a.p+"assets/img/linked-list-allocator-remove-region.2c38502d.svg"},569:function(s,t,a){s.exports=a.p+"assets/img/linked-list-allocator-fragmentation-on-dealloc.cc1a02fc.svg"},570:function(s,t,a){s.exports=a.p+"assets/img/linked-list-allocator-merge-on-dealloc.bcd2897b.svg"},571:function(s,t,a){s.exports=a.p+"assets/img/fixed-size-block-example.9ec70abb.svg"},727:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("原文："),n("a",{attrs:{href:"https://os.phil-opp.com/allocator-designs/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Allocator Designs"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("本文讲解如何从零开始实现堆内存分配器。具体会展示和讨论三种不同的分配器设计，包括粗块式分配、链表式分配和固定块式分配。我们会为每种设计提供基本实现，并用于内核。")]),s._v(" "),n("p",[s._v("此博客在 "),n("a",{attrs:{href:"https://github.com/phil-opp/blog_os",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub"),n("OutboundLink")],1),s._v(" 上公开开发。如果您有任何问题或疑问，请在那边打开一个 issue。 您也可以在 "),n("a",{attrs:{href:"#valine"}},[s._v("底部")]),s._v(" 发表评论。这篇文章的完整源代码可以在 "),n("a",{attrs:{href:"https://github.com/sammyne/blog-os-cn/tree/master/11-allocator-designs",target:"_blank",rel:"noopener noreferrer"}},[s._v("blog-os-cn/11-allocator-designs"),n("OutboundLink")],1),s._v(" 找到。")]),s._v(" "),n("h2",{attrs:{id:"引言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),n("p",[n("RouterLink",{attrs:{to:"/2020/08/05/blog-os-10-heap-allocation/"}},[s._v("上一篇文章")]),s._v(" 支持了我们的内核实现基本的堆内存分配。具体实现为：在页表中 "),n("RouterLink",{attrs:{to:"/2020/08/05/blog-os-10-heap-allocation/#创建一个内核堆"}},[s._v("创建一个新的内存区域")]),s._v("，然后 "),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/10-heap-allocation/#using-an-allocator-crate"}},[s._v("使用 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包")]),s._v(" 管理那部分内存。虽然有了一个可用的堆，但是大部分工作都是借助分配器包实现的，我们尚未尝试了解其细节。")],1),s._v(" "),n("p",[s._v("本文将会演示如何从零开始创建我们自己的堆分配器，不再依赖现有的分配器包。我们将会讨论不同的分配器设计方案，包括简化的 "),n("em",[s._v("粗块分配器")]),s._v(" 和一个基本的 "),n("em",[s._v("固定块式分配器")]),s._v("，并结合这些知识实现一个更高性能的分配器（和 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包相比）。")]),s._v(" "),n("h3",{attrs:{id:"设计目标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[s._v("#")]),s._v(" 设计目标")]),s._v(" "),n("p",[s._v("分配器负责管理可用的堆内存。它需要在 "),n("code",[s._v("alloc")]),s._v(" 调用时返回空闲的内存，记录被 "),n("code",[s._v("dealloc")]),s._v(" 释放的内存，使得这部分内存可以被重用。最重要的是，它决不能提供已被使用的内存，否则将会触发未定义行为。")]),s._v(" "),n("p",[s._v("除了正确性以外，还有更多次要的设计目标。例如，分配器应该能够有效地利用可用的内存，保持低 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)",target:"_blank",rel:"noopener noreferrer"}},[s._v("碎片率"),n("OutboundLink")],1),s._v("。它应该能够应对并发的应用，并能够随处理器数量拓展。为了性能最大化，它甚至能够根据 CPU 缓存优化内存布局，从而增强 "),n("a",{attrs:{href:"https://www.geeksforgeeks.org/locality-of-reference-and-cache-operation-in-cache-memory/",target:"_blank",rel:"noopener noreferrer"}},[s._v("缓存局部化"),n("OutboundLink")],1),s._v(" 并避免 "),n("a",{attrs:{href:"https://mechanical-sympathy.blogspot.de/2011/07/false-sharing.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("假共享"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("这些要求使得构建好的分配器变得非常负责。例如，"),n("a",{attrs:{href:"http://jemalloc.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("jemalloc"),n("OutboundLink")],1),s._v(" 的代码超过 30,000 行。考虑到内核代码的一个小 bug 都会导致严重的安全问题，这等复杂度通常是没有必要的。好在内核代码的分配器模式要比用户空间代码的简单得多，因此，非常简单的分配器方案通常就够用了。")]),s._v(" "),n("p",[s._v("后续部分将会展示三种不同的内核分配器方案，并分析它们各自的优劣。")]),s._v(" "),n("h2",{attrs:{id:"粗块分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#粗块分配器"}},[s._v("#")]),s._v(" 粗块分配器")]),s._v(" "),n("p",[n("em",[s._v("粗块分配器")]),s._v("（又名 "),n("em",[s._v("栈分配器")]),s._v("）是最简单的分配器方案。它会线性地分配内存，只记录已分配的字节数和分配的块数。因为存在所有内存只能一次性释放的严重缺陷，所以这种方案只适用于非常有限的场景。")]),s._v(" "),n("h3",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),n("p",[s._v("粗块分配器的基本思想是线性地增加（"),n("em",[s._v("bump")]),s._v("）"),n("code",[s._v("next")]),s._v(" 变量，这个变量指向空闲内存的起始地址。最初，"),n("code",[s._v("next")]),s._v(" 变量等于堆内存的起始地址。每次分配都会增加 "),n("code",[s._v("next")]),s._v(" 变量，使其总是指向已用和未用内存的边界：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(564),alt:"三个时间点的堆内存分布：1. 从堆空间起始分配第一块内存，next 指向这块内存的末尾；2. 第二块内存添加在第一块末尾，next 指针指向这一块的末尾；3. 第三块内存添加在第二块末尾；next 指针指向第三块内存的末尾"}})]),s._v(" "),n("p",[n("code",[s._v("next")]),s._v(" 指针只会单向移动，因此永不会将重复分配同一份内存区域。到达堆内存末尾时，没有更多可用内存了，这时就会在下一次内存分配时触发 out-of-memory 错误。")]),s._v(" "),n("p",[s._v("粗块分配器的实现通常有一个分配计数器，每次 "),n("code",[s._v("alloc")]),s._v(" 调用时加一，"),n("code",[s._v("dealloc")]),s._v(" 调用时减一。分配计数器变为 0 表明堆上所有内存都被释放了。这时，"),n("code",[s._v("next")]),s._v(" 指针可以重置为堆的起始地址，使得整块堆内存可以被再次使用。")]),s._v(" "),n("h3",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),n("p",[s._v("我们首先先为实现声明一个 "),n("code",[s._v("allocator::bump")]),s._v(" 子模块：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[s._v("bump")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("子模块的内容放在 "),n("code",[s._v("src/allocator/bump.rs")]),s._v(" 文件，具体如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/bump.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("BumpAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    heap_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    allocations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Creates a new empty bump allocator.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            heap_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            allocations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Initializes the bump allocator with the given heap bounds.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This method is unsafe because the caller must ensure that the given")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// memory range is unused. Also, this method must be called only once.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("heap_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("heap_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" heap_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[n("code",[s._v("heap_start")]),s._v(" 和 "),n("code",[s._v("heap_end")]),s._v(" 字段记录堆内存区域的下界和上界。调用者需要确保地址的合法性，否则分配器会返回非法的内存。因此，"),n("code",[s._v("init")]),s._v(" 函数需要以 "),n("code",[s._v("unsafe")]),s._v(" 的形式调用。")]),s._v(" "),n("p",[n("code",[s._v("next")]),s._v(" 字段的用途是指向堆内存第一个空闲的字节，即下次分配的起始地址。因为初始时整个堆都是空闲的，所以这个字段在 "),n("code",[s._v("init")]),s._v(" 函数中被设置为 "),n("code",[s._v("heap_start")]),s._v("。每次分配时，这个字段的值会加上请求分配的内存大小，来防止两次分配返回相同的内存区域。")]),s._v(" "),n("p",[n("code",[s._v("allocations")]),s._v(" 字段作为简单计数器，记录当前活跃的内存块数，从而实现在最后一块内存被释放后将分配器重置的目标。它的初始值为 0。")]),s._v(" "),n("p",[s._v("我们选择创建独立的 "),n("code",[s._v("init")]),s._v(" 函数，而不是在 "),n("code",[s._v("new")]),s._v(" 函数里面直接执行初始化，是为了保持和 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包所提供分配器一样的接口。这样切换分配器时就不需要额外的代码变更。")]),s._v(" "),n("h3",{attrs:{id:"实现-globalalloc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-globalalloc"}},[s._v("#")]),s._v(" 实现 "),n("code",[s._v("GlobalAlloc")])]),s._v(" "),n("p",[n("RouterLink",{attrs:{to:"/2020/08/05/blog-os-10-heap-allocation/#分配器接口"}},[s._v("上一篇文章讲过")]),s._v("，所有堆内存分配器都需要实现 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("GlobalAlloc")]),n("OutboundLink")],1),s._v(" trait，定义如下：")],1),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("trait")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc_zeroed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("realloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        new_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("只有 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 方法是必须的，其他两个方法有默认实现，可以忽略。")]),s._v(" "),n("h4",{attrs:{id:"第一次实现尝试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一次实现尝试"}},[s._v("#")]),s._v(" 第一次实现尝试")]),s._v(" "),n("p",[s._v("让我们实现 "),n("code",[s._v("BumpAllocator")]),s._v(" 的 "),n("code",[s._v("alloc")]),s._v(" 方法：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/bump.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO alignment and bounds check")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" alloc_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allocations "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        alloc_start "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" _ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" _layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("todo!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("首先，使用 "),n("code",[s._v("next")]),s._v(" 字段作为分配的开始地址。然后更新 "),n("code",[s._v("next")]),s._v(" 字段指向分配的结束地址，即堆上下一个空闲的地址。以 "),n("code",[s._v("*mut u8")]),s._v(" 指针形式返回分配的起始地址前，把 "),n("code",[s._v("allocations")]),s._v(" 计数器加一。")]),s._v(" "),n("p",[s._v("需要注意的是我们没有检查边界或调整对齐，所以这份实现是不安全的。问题不大，因为编译会失败，打印一下错误：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("E0594"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": cannot assign to "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("self.next"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" is behind a "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" reference\n  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" src/allocator/bump.rs:29:9\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     unsafe fn alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("self, layout: Layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" -"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" *mut u8 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                     ----- help: consider changing this to be a mutable reference: "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("mut self"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         self.next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" alloc_start + layout.size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" is a "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" reference, so the data it refers to cannot be written\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("（简介起见，"),n("code",[s._v("self.allocations += 1")]),s._v(" 行也触发的同样错误没有列出。）")]),s._v(" "),n("p",[s._v("错误原因是 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait 的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#tymethod.alloc",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("alloc")]),n("OutboundLink")],1),s._v(" 和 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("dealloc")]),n("OutboundLink")],1),s._v(" 方法只能操作不可变的 "),n("code",[s._v("&self")]),s._v(" 引用，所以是不可能允许更新 "),n("code",[s._v("next")]),s._v(" 和 "),n("code",[s._v("allocations")]),s._v(" 字段的。这就有问题了，因为每次分配时更新 "),n("code",[s._v("next")]),s._v(" 字段对于粗块分配器来说必不可少的。")]),s._v(" "),n("p",[s._v("需要注意的是编译器建议把方法声明中的 "),n("code",[s._v("&self")]),s._v(" 改为 "),n("code",[s._v("&mut self")]),s._v(" 是不可行的。原因是 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait 定义了方法签名，无法在实现侧改变。（对于不合理的编译器建议，我在 Rust 仓库开了个 "),n("a",{attrs:{href:"https://github.com/rust-lang/rust/issues/68049",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue"),n("OutboundLink")],1),s._v("）")]),s._v(" "),n("h4",{attrs:{id:"globalalloc-和可更改性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#globalalloc-和可更改性"}},[s._v("#")]),s._v(" "),n("code",[s._v("GlobalAlloc")]),s._v(" 和可更改性")]),s._v(" "),n("p",[s._v("探寻解决可更改性问题的方案之前，让我们试着理解为什么 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait 的方案用 "),n("code",[s._v("&self")]),s._v(" 参数定义：由 "),n("RouterLink",{attrs:{to:"/2020/08/05/blog-os-10-heap-allocation/#global-allocator-属性"}},[s._v("上一篇文章")]),s._v(" 可知，全局堆内存分配器定义形式为给一个实现 "),n("code",[s._v("GlobalAlloc")]),s._v(" 的静态变量添加 "),n("code",[s._v("#[global_allocator]")]),s._v(" 属性。Rust 的静态变量是不可变的，所以不存在可以调用接收 "),n("code",[s._v("&mut self")]),s._v(" 的静态变量的方法。因此，"),n("code",[s._v("GlobalAlloc")]),s._v(" 的所有方法都只接收一个不可变的 "),n("code",[s._v("&self")]),s._v(" 引用。")],1),s._v(" "),n("p",[s._v("好在从 "),n("code",[s._v("&self")]),s._v(" 获取 "),n("code",[s._v("&mut self")]),s._v(" 是有办法的：我们可以利用同步 "),n("a",{attrs:{href:"https://doc.rust-lang.org/book/ch15-05-interior-mutability.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("内部可更改性"),n("OutboundLink")],1),s._v(" 把分配器包在一个 "),n("a",{attrs:{href:"https://docs.rs/spin/0.5.0/spin/struct.Mutex.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("spin::Mutex")]),n("OutboundLink")],1),s._v(" 自旋锁里面。这个类型提供的 "),n("code",[s._v("lock")]),s._v(" 方法能够实现 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Mutual_exclusion",target:"_blank",rel:"noopener noreferrer"}},[s._v("互斥"),n("OutboundLink")],1),s._v("，因此能够安全地把一个 "),n("code",[s._v("&self")]),s._v(" 转化为一个 "),n("code",[s._v("&mut self")]),s._v("。我们已经在内核多次使用了这个包装类型，例如 "),n("RouterLink",{attrs:{to:"/2020/07/23/blog-os-03-vga-text-mode/#自旋锁"}},[s._v("VGA 文本缓冲区")]),s._v("。")],1),s._v(" "),n("h4",{attrs:{id:"locked-包装类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#locked-包装类型"}},[s._v("#")]),s._v(" "),n("code",[s._v("Locked")]),s._v(" 包装类型")]),s._v(" "),n("p",[s._v("借助 "),n("code",[s._v("spin::Mutex")]),s._v(" 包装类型，我们能够为粗块分配器实现 "),n("code",[s._v("GlobalAlloc")]),s._v("。骚操作如下：直接实现这个 trait 的不是 "),n("code",[s._v("BumpAllocator")]),s._v("，而是包装好的 "),n("code",[s._v("spin::Mutex<BumpAllocator>")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("spin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("…"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("不幸的是，因为 Rust 编译器不允许为定义在其他包的类型实现 trait，因此这种方式是行不通的：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("E0117"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": only traits defined "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the current crate can be implemented "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" arbitrary types\n  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" src/allocator/bump.rs:28:1\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" unsafe impl GlobalAlloc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" spin::Mutex"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BumpAllocator"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                           "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("                           "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("spin::mutex::Mutex"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" is not defined "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the current crate\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" impl doesn't use only types from inside the current crate\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: define and implement a trait or new "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" instead\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("为了解决这个问题，我们需要包装一下 "),n("code",[s._v("spin::Mutex")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// A wrapper around spin::Mutex to permit trait implementations.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    inner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("spin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("inner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            inner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("spin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mutex")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("inner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("spin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MutexGuard")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("这个类型是包装 "),n("code",[s._v("spin::Mutex<A>")]),s._v(" 的一个泛型。它对被包装的类型 "),n("code",[s._v("A")]),s._v(" 没有任何限制，所以不仅可以包装分配器，还可以包装各种类型。它提供一个简单的 "),n("code",[s._v("new")]),s._v(" 构造函数用于包装给定的值。为了简单起见，它还提供一个 "),n("code",[s._v("lock")]),s._v(" 函数，这个函数调用被包装的 "),n("code",[s._v("Mutex")]),s._v(" 的 "),n("code",[s._v("lock")]),s._v(" 方法。由于 "),n("code",[s._v("Locked")]),s._v(" 类型足够通用，能在其他分配器实现中用上，因此我们把它放在父模块 "),n("code",[s._v("allocator")]),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"locked-bumpallocator-的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#locked-bumpallocator-的实现"}},[s._v("#")]),s._v(" "),n("code",[s._v("Locked<BumpAllocator>")]),s._v(" 的实现")]),s._v(" "),n("p",[n("code",[s._v("Locked")]),s._v(" 类型的定义在我们自己的包（不同于 "),n("code",[s._v("spin::Mutex")]),s._v("），所以可以用其为粗块分配器实现 "),n("code",[s._v("GlobalAlloc")]),s._v("。完整的实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/bump.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("align_up"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" bump "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// get a mutable reference")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checked_add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("null_mut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" alloc_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("heap_end "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("null_mut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// out of memory")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" alloc_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allocations "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            alloc_start "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" _ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" _layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" bump "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// get a mutable reference")]),s._v("\n\n        bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allocations "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allocations "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 的第一步是通过 "),n("code",[s._v("inner")]),s._v(" 字段调用 "),n("a",{attrs:{href:"https://docs.rs/spin/0.5.0/spin/struct.Mutex.html#method.lock",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Mutex::lock")]),n("OutboundLink")],1),s._v(" 方法得到被包装的分配器类型的可修改引用。这个实例到方法末尾之前会一直保持锁定，所以多线程场景下也不会出现数据竞争（我们后续很快会讲到线程）。")]),s._v(" "),n("p",[s._v("和之前的原型相比，"),n("code",[s._v("alloc")]),s._v(" 的实现满足了对齐要求并之前边界检查，确保分配局限在堆内存区域内。第一步是把 "),n("code",[s._v("next")]),s._v(" 地址约近到 "),n("code",[s._v("Layout")]),s._v(" 参数指定的对齐。"),n("code",[s._v("align_up")]),s._v(" 函数的代码很快讲到。然后 "),n("code",[s._v("alloc_start")]),s._v(" 加上请求分配的大小，得到分配的结束地址。为了防止大型分配情况下的整数溢出问题，我们使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.usize.html#method.checked_add",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("checked_add")]),n("OutboundLink")],1),s._v(" 方法。如果溢出发生或者分配所得结束地址大于堆的结束地址，返回提示 out-of-memory 的空指针。否则，和之前那样更新 "),n("code",[s._v("next")]),s._v(" 地址，"),n("code",[s._v("allocations")]),s._v("  加一。最后把返回的 "),n("code",[s._v("alloc_start")]),s._v(" 地址转换为 "),n("code",[s._v("*mut u8")]),s._v(" 指针。")]),s._v(" "),n("p",[n("code",[s._v("dealloc")]),s._v(" 函数忽略给定的指针和 "),n("code",[s._v("Layout")]),s._v(" 参数。它只是简单的把 "),n("code",[s._v("allocations")]),s._v(" 计数器减一。计数器再次变为 "),n("code",[s._v("0")]),s._v(" 意味着所有分配都被释放了。这种情况下，"),n("code",[s._v("next")]),s._v(" 地址会被重置为 "),n("code",[s._v("heap_start")]),s._v(" 地址，使得整个堆内存再次可用。")]),s._v(" "),n("h4",{attrs:{id:"地址对齐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#地址对齐"}},[s._v("#")]),s._v(" 地址对齐")]),s._v(" "),n("p",[n("code",[s._v("align_up")]),s._v(" 函数比较通用，所以我们把它放到父模块 "),n("code",[s._v("allocator")]),s._v("。其基本实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Align the given address `addr` upwards to alignment `align`.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" remainder "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" remainder "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        addr "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// addr already aligned")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" remainder "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" align\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("这个函数首先计算 "),n("code",[s._v("addr")]),s._v(" 除以 "),n("code",[s._v("align")]),s._v(" 的 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Euclidean_division",target:"_blank",rel:"noopener noreferrer"}},[s._v("余数"),n("OutboundLink")],1),s._v("。如果余数为 "),n("code",[s._v("0")]),s._v("，地址就已经满足给定的对齐了。否则，我们对齐地址的操作为：减去余数（使得新的余数为 0），然后加上对齐量（使得地址不会变得小于原始地址）。")]),s._v(" "),n("p",[s._v("值得注意的是：这个函数的最高效实现方式不是这样的。一个更快的实现方式如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Align the given address `addr` upwards to alignment `align`.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Requires that `align` is a power of two.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" align "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("align "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这个方法基于这样一个事实："),n("code",[s._v("GlobalAlloc")]),s._v(" trait 保证 "),n("code",[s._v("align")]),s._v(" 总是 2 的次幂。这样一来，创建一个 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Mask_(computing)",target:"_blank",rel:"noopener noreferrer"}},[s._v("掩码"),n("OutboundLink")],1),s._v(" 高效地对齐地址就变得可能了。为了消化一下它的原理，我们从右边开始一步步地拆解来看：")]),s._v(" "),n("ul",[n("li",[s._v("由于 "),n("code",[s._v("align")]),s._v(" 是 2 的次幂，所以它的 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Binary_number#Representation",target:"_blank",rel:"noopener noreferrer"}},[s._v("二进制表示"),n("OutboundLink")],1),s._v(" 只有一位置 1（例如，"),n("code",[s._v("0b000100000")]),s._v("）。这意味着 "),n("code",[s._v("align - 1")]),s._v(" 的所有更低位都置 1 了（例如，"),n("code",[s._v("0b00011111")]),s._v("）")]),s._v(" "),n("li",[s._v("借助 "),n("code",[s._v("!")]),s._v(" 运算符实现 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bitwise_operation#NOT",target:"_blank",rel:"noopener noreferrer"}},[s._v("按位取反"),n("OutboundLink")],1),s._v("，我们得到一个这样的数字：比 "),n("code",[s._v("align")]),s._v(" 低的所有位之外的其他位都置 1（例如，"),n("code",[s._v("0b…111111111100000")]),s._v("）")]),s._v(" "),n("li",[s._v("对地址和 "),n("code",[s._v("!(align - 1)")]),s._v(" 执行 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bitwise_operation#AND",target:"_blank",rel:"noopener noreferrer"}},[s._v("按位与"),n("OutboundLink")],1),s._v(" 操作，我们 "),n("em",[s._v("向下")]),s._v(" 对齐地址。它会把所有低于 "),n("code",[s._v("align")]),s._v(" 的位置零")]),s._v(" "),n("li",[s._v("由于想要向上对齐而不是向下对齐，我们在执行按位与操作前把 "),n("code",[s._v("addr")]),s._v(" 加上 "),n("code",[s._v("align - 1")]),s._v("。这样的话，已经对齐的地址会保持不变，而非对齐的地址则会对其他下一个对齐的边界")])]),s._v(" "),n("p",[s._v("选用的方法因人而异。两个方法都会计算得到相同的结果，只是用了不同的方式。")]),s._v(" "),n("h3",{attrs:{id:"使用它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用它"}},[s._v("#")]),s._v(" 使用它")]),s._v(" "),n("p",[s._v("为了用粗块分配器替换 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包，我们需要更新 "),n("code",[s._v("allocator.rs")]),s._v(" 文件的静态变量 "),n("code",[s._v("ALLOCATOR")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("bump"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[global_allocator]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ALLOCATOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BumpAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("我们把 "),n("code",[s._v("BumpAllocator::new")]),s._v(" 和 "),n("code",[s._v("Locked::new")]),s._v(" 定义为 "),n("a",{attrs:{href:"https://doc.rust-lang.org/reference/items/functions.html#const-functions",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("const")]),s._v(" 函数"),n("OutboundLink")],1),s._v(" 的重要性这时就显现出来了。由于 "),n("code",[s._v("static")]),s._v(" 变量的初始化表达式必须在编译时可计算，把它们变成常规函数会触发编译错误。")]),s._v(" "),n("p",[s._v("因为粗块分配器提供了和 "),n("code",[s._v("linked_list_allocator")]),s._v(" 一样的分配器接口，所以我们不需要改变 "),n("code",[s._v("init_heap")]),s._v(" 函数里面的 "),n("code",[s._v("ALLOCATOR.lock().init(HEAP_START, HEAP_SIZE)")]),s._v(" 调用。")]),s._v(" "),n("p",[s._v("现在内核就可以使用我们的粗块分配器了！一切都应该正常，包括上一篇文章创建的 "),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/10-heap-allocation/#adding-a-test"}},[n("code",[s._v("heap_allocation")]),s._v(" 测试")]),s._v("：")],1),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" --test heap_allocation\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nRunning "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" tests\nsimple_allocation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nlarge_vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"讨论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#讨论"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),n("p",[s._v("粗块分配器的最大优势是非常快速。其他分配器方案（往后看）需要积极查询合适的内存块并记录 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v("，而粗块分配器 "),n("a",{attrs:{href:"https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("可以优化"),n("OutboundLink")],1),s._v(" 到用少数汇编指令。这个特点让粗块分配器非常有助于优化分配器性能，例如用于创建一个 "),n("a",{attrs:{href:"https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/",target:"_blank",rel:"noopener noreferrer"}},[s._v("虚拟的 DOM 库"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("虽然粗块分配器很少用作全局分配器，但是其原理经常以 "),n("a",{attrs:{href:"https://mgravell.github.io/Pipelines.Sockets.Unofficial/docs/arenas.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("arena 分配"),n("OutboundLink")],1),s._v(" 的形式应用，这种应用形式为了提高性能基本会把个别分配放到一起批处理。Rust 的 arena 分配器的样例为 "),n("a",{attrs:{href:"https://docs.rs/toolshed/0.8.1/toolshed/index.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("toolshed")]),n("OutboundLink")],1),s._v(" 包。")]),s._v(" "),n("h4",{attrs:{id:"粗块分配器的缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#粗块分配器的缺点"}},[s._v("#")]),s._v(" 粗块分配器的缺点")]),s._v(" "),n("p",[s._v("粗块分配器的主要局限性是它只能在所有已分配内存被释放后重用释放的内存。这就意味着一个长存的分配就足以阻止内存复用。添加修改版的 "),n("code",[s._v("many_boxes")]),s._v(" 测试即可看到这个效果：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in tests/heap_allocation.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[test_case]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("many_boxes_long_lived")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" long_lived "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAP_SIZE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Box")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("long_lived"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("和 "),n("code",[s._v("many_boxes")]),s._v(" 测试类似，这个测试创建大量内存分配，如果分配器没有复用释放的内存就会触发 out-of-memory 错误。另外，这个测试分配了在整个循环执行期间内都有效的一个 "),n("code",[s._v("long_lived")]),s._v("。")]),s._v(" "),n("p",[s._v("运行新版测试可以看到确实失败了：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" --test heap_allocation\nRunning "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" tests\nsimple_allocation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nlarge_vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes_long_lived"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("failed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\nError: panicked at "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'allocation error: Layout { size_: 8, align_: 8 }'")]),s._v(", src/lib.rs:86:5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("让我们仔细理一下错误原因：首先，分配的 "),n("code",[s._v("long_lived")]),s._v(" 创建在堆的起始地址，把 "),n("code",[s._v("allocations")]),s._v(" 计数器加一。每次循环，一个短期的分配被创建出来，然后在下一次迭代开始前直接被释放。这意味着 "),n("code",[s._v("allocations")]),s._v(" 计算在每次迭代开始时临时加到 2，迭代结束后降为 1。问题在于粗块分配器只有在 "),n("em",[s._v("所有")]),s._v(" 已分配内存都释放后才能重用内存，即 "),n("code",[s._v("allocations")]),s._v(" 计算器降为 0 时。由于这个条件在循环结束前不会发生，每次迭代分配一个新的内存区域，多次迭代后就会触发 out-of-memory 错误。")]),s._v(" "),n("h4",{attrs:{id:"修复测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修复测试"}},[s._v("#")]),s._v(" 修复测试？")]),s._v(" "),n("p",[s._v("以下两个可能的骚操作可以用于修复粗块分配器的测试：")]),s._v(" "),n("ul",[n("li",[s._v("把 "),n("code",[s._v("dealloc")]),s._v(" 更新成这样：比较当前被释放的内存结束地址和 "),n("code",[s._v("next")]),s._v(" 指针，确定其是否是上一次被 "),n("code",[s._v("alloc")]),s._v(" 最近分配的内存。如果结束地址和 "),n("code",[s._v("next")]),s._v(" 指针相等，我们就可以安全地把 "),n("code",[s._v("next")]),s._v(" 重置回被释放内存的起始地址了。这样，每轮迭代就可以重用同样的内存区块")]),s._v(" "),n("li",[s._v("添加 "),n("code",[s._v("alloc_back")]),s._v(" 方法，借助额外 "),n("code",[s._v("next_back")]),s._v(" 字段实现从堆内存的 "),n("em",[s._v("末端")]),s._v(" 开始分配内存。然后对于所有长期的内存分配，使用这个分配方法，从而分离堆上的短期和长期的内存。需要注意的是，只有在提前知道长期内存的有效时间时，这个分离操作才是有效的。这种方法的另一个缺点是手动执行内存分配是比较麻烦甚至不太安全的")])]),s._v(" "),n("p",[s._v("虽然两种方法都是能够修复测试，但是他们只能在非常特定的情况下才能重用内存，所以他们都不是通用的解决方案。问题来了：存在能够复用所有已释放内存的通用解决方案吗？")]),s._v(" "),n("h4",{attrs:{id:"复用所有已释放内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复用所有已释放内存"}},[s._v("#")]),s._v(" 复用所有已释放内存？")]),s._v(" "),n("p",[s._v("由 "),n("RouterLink",{attrs:{to:"/2020/08/05/blog-os-10-heap-allocation/#动态内存"}},[s._v("上一篇文章")]),s._v(" 可知，分配的内存的存活时间是任意长的，会以任意顺序被释放掉。如下例子所示，这意味着我们需要记录一个可能无上限数目的、不连续的空闲内存区域。")],1),s._v(" "),n("p",[n("img",{attrs:{src:a(565),alt:""}})]),s._v(" "),n("p",[s._v("上图展示了堆内存随时间推移的变化情况。开始的时候，整个堆都是未被使用的，"),n("code",[s._v("next")]),s._v(" 地址等于 "),n("code",[s._v("heap_start")]),s._v("（第一行）。然后，第二行出现第一次内存分配。第三行时，分配了第二块内存，且第一块内存被释放了。第四行分配了更多内存。第五行释放了其中半数的短期内存，并分配了又一块内存。")]),s._v(" "),n("p",[s._v("第五行说明了根本问题：总共有五块空闲的内存区域，但是 "),n("code",[s._v("next")]),s._v(" 指针只指向最后一块的起始地址。虽然这种情况下我们可以用大小为 4 的数组保存其他空闲内存区域的起始地址和长度，但是我们也可能遇到 8、16 或者 1000 个等等空闲内存区域，所以这不是个通用的解决方案。")]),s._v(" "),n("p",[s._v("一般情况下，我们可能会遇到无数的内存块，也许可以直接用堆分配的集合存储。但是在我们的情况下，由于堆不能依赖自身（它会导致无限递归或死锁），所以是真的不可行。因此，我们需要找一个不同的方案。")]),s._v(" "),n("h2",{attrs:{id:"链表分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链表分配器"}},[s._v("#")]),s._v(" 链表分配器")]),s._v(" "),n("p",[s._v("实现分配器时，为了记录任何数目的空闲内存区域，一个常见操作是使用这些区域作为后备存储。这利用了这样的事实：内存依然映射到虚拟地址，由物理帧提供存储，但是存储的内容不再需要而已（TODO 不懂）。通过把空闲区域的信息存储到区域本身，我们无需额外内存即可追踪到无数的空闲区域了。")]),s._v(" "),n("p",[s._v("最常见的实现方式是在空闲内存中构造一个单链表，每个节点表示一个空闲内存区域：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(566),alt:""}})]),s._v(" "),n("p",[s._v("每个链表节点包含两个字段：内存区域的大小和指向下一块空闲内存区域的指针。采用这种方法后，我们只需要一个指向第一块空闲区域（称为 "),n("code",[s._v("head")]),s._v("）的指针，即可追踪到所有空闲的区域，不用在意它们的数目。所得数据结构通常称为 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Free_list",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("空闲列表")]),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("由名字可能也会猜到，这正是 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包使用的技巧。使用这种技巧的分配器通常也被称为 "),n("em",[s._v("池式分配器")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"实现-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-2"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),n("p",[s._v("后续部分，我们将会使用以上方式创建自己的简易 "),n("code",[s._v("LinkedListAllocator")]),s._v(" 类型，用于追踪空闲内存区域。这部分对于后续文章不是必须的，所以没兴趣的话可以跳过实现细节。")]),s._v(" "),n("h4",{attrs:{id:"分配器类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分配器类型"}},[s._v("#")]),s._v(" 分配器类型")]),s._v(" "),n("p",[s._v("现在新的 "),n("code",[s._v("allocator::linked_list")]),s._v(" 子模块创建一个私有的 "),n("code",[s._v("ListNode")]),s._v(" 结构体：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[s._v("linked_list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("如图，链表节点有一个 "),n("code",[s._v("size")]),s._v(" 字段和一个用 "),n("code",[s._v("Option<&'static mut ListNode>")]),s._v(" 类型表示的指向下一个节点的可选指针。"),n("code",[s._v("&'static mut")]),s._v(" 类型从语义上描述指针背后的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("owned"),n("OutboundLink")],1),s._v(" 对象。简单来说，它就是个 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/boxed/index.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Box")]),n("OutboundLink")],1),s._v("，只是没有在对象作用域末尾负责释放内存的析构函数而已。")]),s._v(" "),n("p",[s._v("我们为 "),n("code",[s._v("ListNode")]),s._v(" 实现以下方法集：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("start_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("end_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("start_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("这个类型有一个名为 "),n("code",[s._v("new")]),s._v(" 的简单构造函数，和用于计算要表示区域的起始地址和结束地址的其他方法。因为构造静态链表式分配器时需要用到，我们把 "),n("code",[s._v("new")]),s._v(" 函数定义为 "),n("a",{attrs:{href:"https://doc.rust-lang.org/reference/items/functions.html#const-functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("const 函数"),n("OutboundLink")],1),s._v("。需要注意的是：在 const 函数中使用可修改的引用（包括把 "),n("code",[s._v("next")]),s._v(" 设置为 "),n("code",[s._v("None")]),s._v("）依然是不稳定的。为了使编译通过，我们需要在 "),n("code",[s._v("lib.rs")]),s._v(" 头部添加 "),n("strong",[n("code",[s._v("#![feature(const_fn)]")])]),s._v("。")]),s._v(" "),n("p",[s._v("有了 "),n("code",[s._v("ListNode")]),s._v(" 结构体作为基础，我们现在可以创建 "),n("code",[s._v("LinkedListAllocator")]),s._v(" 结构体了：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Creates an empty LinkedListAllocator.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Initialize the allocator with the given heap bounds.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This function is unsafe because the caller must guarantee that the given")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// heap bounds are valid and that the heap is unused. This method must be")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// called only once.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add_free_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Adds the given memory region to the front of the list.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("add_free_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("todo!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("这个结构体包含一个指向第一块堆内存的 "),n("code",[s._v("head")]),s._v(" 节点。我们只关心 "),n("code",[s._v("next")]),s._v(" 指针的值，所以在 "),n("code",[s._v("ListNone::new")]),s._v(" 函数里把 "),n("code",[s._v("size")]),s._v(" 设置为 0。把 "),n("code",[s._v("head")]),s._v(" 定义成 "),n("code",[s._v("ListNode")]),s._v(" 而不是 "),n("code",[s._v("&'static mut ListNode")]),s._v(" 的好处是："),n("code",[s._v("alloc")]),s._v(" 方法的实现会更加简单。")]),s._v(" "),n("p",[s._v("和粗块分配器类似，"),n("code",[s._v("new")]),s._v(" 函数没有用堆边界初始化分配器。除了想要维持 API 兼容性外，理由是初始化流程要求往堆内存写入一个节点，这个写入只能发生在运行时。然而，因为 "),n("code",[s._v("new")]),s._v(" 函数用于初始化 "),n("code",[s._v("ALLOCATOR")]),s._v(" 静态变量，所以它需要是在编译时就能估值的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/reference/items/functions.html#const-functions",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("const")]),s._v(" 函数"),n("OutboundLink")],1),s._v("。因此，我们再次提供一个分开的、non-constant 的 "),n("code",[s._v("init")]),s._v(" 方法。")]),s._v(" "),n("p",[n("code",[s._v("init")]),s._v(" 方法使用的 "),n("code",[s._v("add_free_region")]),s._v(" 方法的具体实现马上讲到。我们暂且用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/macro.todo.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("todo!")]),n("OutboundLink")],1),s._v(" 宏为其提供一个总会 panic 的占位实现。")]),s._v(" "),n("h4",{attrs:{id:"add-free-region-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-free-region-方法"}},[s._v("#")]),s._v(" "),n("code",[s._v("add_free_region")]),s._v(" 方法")]),s._v(" "),n("p",[n("code",[s._v("add_free_region")]),s._v(" 方法提供链表的一个基础 "),n("em",[s._v("push")]),s._v(" 操作。我们当前只会在 "),n("code",[s._v("init")]),s._v(" 函数调用这个方法，但是这个方法还会作为 "),n("code",[s._v("dealloc")]),s._v(" 实现的核心方法。别忘了：一块内存已分配内存被释放时会再次调用 "),n("code",[s._v("dealloc")]),s._v(" 方法。为了追踪这个空闲的内存区域，我们想要把它添加到链表里面。")]),s._v(" "),n("p",[n("code",[s._v("add_free_region")]),s._v(" 方法的实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Adds the given memory region to the front of the list.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("add_free_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ensure that the freed region is capable of holding ListNode")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert_eq!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// create a new list node and append it at the start of the list")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" node_ptr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" addr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        node_ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("node_ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("这个方法接收一个地址和大小作为参数表示一个内存区域，并把它添加到链表头部。首先确保给定区域具有足够的大小和合适的对齐用于存储一个 "),n("code",[s._v("ListNode")]),s._v("。然后创建一个链表节点，执行以下步骤把它插入链表：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(567),alt:""}})]),s._v(" "),n("p",[s._v("第 0 步显示调用 "),n("code",[s._v("add_free_region")]),s._v(" 之前堆的状态。第 1 步以图中标记为 "),n("code",[s._v("freed")]),s._v(" 的内存区域调用方法。初步检查后，这个方法基于空闲区域的大小在栈上创建一个新的 "),n("code",[s._v("node")]),s._v("。 它然后使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/option/enum.Option.html#method.take",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Option::take")]),n("OutboundLink")],1),s._v(" 方法把新建节点的 "),n("code",[s._v("next")]),s._v(" 指针设置为当前的 "),n("code",[s._v("head")]),s._v(" 指针，从而把 "),n("code",[s._v("head")]),s._v(" 指针重置为 "),n("code",[s._v("None")]),s._v("。")]),s._v(" "),n("p",[s._v("第 2 步中，这个方法调用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.pointer.html#method.write",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("write")]),n("OutboundLink")],1),s._v(" 方法把新建的 "),n("code",[s._v("node")]),s._v(" 写入到空闲内存区域的头部。然后把 "),n("code",[s._v("head")]),s._v(" 指针指向新节点。因为被释放的区域总是插入到链表头部，所以得到的指针结构看起来有点乱，但是沿着指针遍历的话，每个空闲区域对于 "),n("code",[s._v("head")]),s._v(" 指针都是可达的。")]),s._v(" "),n("h4",{attrs:{id:"find-region-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-region-方法"}},[s._v("#")]),s._v(" "),n("code",[s._v("find_region")]),s._v(" 方法")]),s._v(" "),n("p",[s._v("链表的第二个基本操作是查找节点并把它从链表中移除。这是实现 "),n("code",[s._v("alloc")]),s._v(" 方法需要的核心操作。我们把操作实现成以下 "),n("code",[s._v("find_region")]),s._v(" 方法：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Looks for a free region with the given size and alignment and removes")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// it from the list.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns a tuple of the list node and the start address of the allocation.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("find_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// reference to current list node, updated for each iteration")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// look for a large enough memory region in linked list")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ref")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alloc_from_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// region suitable for allocation -> remove node from list")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ret "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ret"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// region not suitable -> continue with next region")]),s._v("\n                current "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("as_mut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// no suitable region found")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("这个方法借助 "),n("code",[s._v("current")]),s._v(" 和 "),n("a",{attrs:{href:"https://doc.rust-lang.org/reference/expressions/loop-expr.html#predicate-pattern-loops",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("while let")]),s._v(" 循环"),n("OutboundLink")],1),s._v(" 遍历链表元素。开始时，"),n("code",[s._v("current")]),s._v(" 设置为 "),n("code",[s._v("head")]),s._v(" 节点。每次迭代过程中，它会更新当前节点的 "),n("code",[s._v("next")]),s._v(" 字段（在 "),n("code",[s._v("else")]),s._v(" 语句块中）。如果指定大小和对齐方式的区域满足分配需求，这个区域会移出链表，并和 "),n("code",[s._v("alloc_start")]),s._v(" 地址一起返回。")]),s._v(" "),n("p",[n("code",[s._v("current.next")]),s._v(" 指针变为 "),n("code",[s._v("None")]),s._v("，退出循环。这意味着遍历整个链表没有找到适合分配的区域。这种情况下，我们返回 "),n("code",[s._v("None")]),s._v("。调用 "),n("code",[s._v("alloc_from_region")]),s._v(" 函数检查一个区域是否合适，具体实现马上讲到。")]),s._v(" "),n("p",[s._v("让我们细看一下合适的区域是如何移出链表的：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(568),alt:""}})]),s._v(" "),n("p",[s._v("第 0 步展示了调整任何指针的情况。"),n("code",[s._v("region")]),s._v(" 区域、"),n("code",[s._v("current")]),s._v(" 区域、"),n("code",[s._v("region.next")]),s._v(" 指针和 "),n("code",[s._v("current.next")]),s._v(" 指针都在图中标记出来了。")]),s._v(" "),n("p",[s._v("第 1 步，"),n("code",[s._v("region.next")]),s._v(" 和 "),n("code",[s._v("current.next")]),s._v(" 指针都调用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/option/enum.Option.html#method.take",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Option::take")]),n("OutboundLink")],1),s._v(" 方法重置为 "),n("code",[s._v("None")]),s._v("。原始的指针存储在名为 "),n("code",[s._v("next")]),s._v(" 和 "),n("code",[s._v("ret")]),s._v(" 的两个局部变量中。")]),s._v(" "),n("p",[s._v("第 2 步，"),n("code",[s._v("current.next")]),s._v(" 指针设置为局部的 "),n("code",[s._v("next")]),s._v(" 指针，即原始的 "),n("code",[s._v("region.next")]),s._v(" 指针。结果就是 "),n("code",[s._v("current")]),s._v(" 现在直接指向了 "),n("code",[s._v("region")]),s._v(" 之后的那个区域，使得 "),n("code",[s._v("region")]),s._v(" 不再是链表的元素了。然后函数返回存在 "),n("code",[s._v("ret")]),s._v(" 局部变量的指向 "),n("code",[s._v("region")]),s._v(" 的指针。")]),s._v(" "),n("h5",{attrs:{id:"alloc-from-region-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alloc-from-region-函数"}},[s._v("#")]),s._v(" "),n("code",[s._v("alloc_from_region")]),s._v(" 函数")]),s._v(" "),n("p",[n("code",[s._v("alloc_from_region")]),s._v(" 函数返回一个区域是否适用于给定大小和对齐的分配。其定义如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Try to use the given region for an allocation with given size and")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// alignment.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the allocation start address on success.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc_from_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Result")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_up")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("start_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checked_add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ok_or")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" alloc_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("end_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// region too small")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" excess_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("end_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" alloc_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" excess_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" excess_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// rest of region too small to hold a ListNode (required because the")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// allocation splits the region in a used and a free part)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// region suitable for allocation")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("首先，函数使用之前定义的 "),n("code",[s._v("align_up")]),s._v(" 函数和 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.usize.html#method.checked_add",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("checked_add")]),n("OutboundLink")],1),s._v(" 方法计算要求的分配的起始和结束地址。如果发生了溢出或者结束地址在区域的结束地址之前的话，本次内存分配不适用于这个区域，返回错误即可。")]),s._v(" "),n("p",[s._v("之后函数执行的检查有点晦涩。因为大部分时间一次内存分配不会恰好和合适的区域吻合，使得区域的一部分在分配后仍然可用，所以检查时非常必要的。区域的这部分必须再存储到自己的 "),n("code",[s._v("ListNode")]),s._v("，所以它必须足够大。检查确认的正是这一点：分配要么恰好吻合（"),n("code",[s._v("excess_size == 0")]),s._v("）或者超出的大小足以存储一个 "),n("code",[s._v("ListNode")]),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"实现-globalalloc-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-globalalloc-2"}},[s._v("#")]),s._v(" 实现 "),n("code",[s._v("GlobalAlloc")])]),s._v(" "),n("p",[s._v("有了 "),n("code",[s._v("add_free_region")]),s._v(" 和 "),n("code",[s._v("find_region")]),s._v(" 方法的基本操作之后，我们终于可以实现 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait 了。和粗块分配器那样，我们不是为 "),n("code",[s._v("LinkedListAllocator")]),s._v(" 直接实现 trait，而是只为包装的 "),n("code",[s._v("Locked<LinkedListAllocator>")]),s._v(" 实现。"),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/11-allocator-designs/#a-locked-wrapper-type"}},[n("code",[s._v("Locked")]),s._v(" 包装器")]),s._v("  借助自旋锁实现内部可修改性，允许在即使 "),n("code",[s._v("alloc")]),s._v("和 "),n("code",[s._v("dealloc")]),s._v(" 方法只接收 "),n("code",[s._v("&self")]),s._v(" 引用的情况下也能修改分配实例。")],1),s._v(" "),n("p",[s._v("代码实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// perform layout adjustments")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" allocator "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("find_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" alloc_end "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" alloc_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("checked_add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("expect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"overflow"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" excess_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" region"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("end_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" alloc_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" excess_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add_free_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("alloc_end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" excess_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            alloc_start "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("null_mut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// perform layout adjustments")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" _"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add_free_region")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ptr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("p",[s._v("由于 "),n("code",[s._v("dealloc")]),s._v(" 方法相对简单，我们从这里讲起：首先，它执行一些布局对齐工作（马上会讲到），并调用 "),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/11-allocator-designs/#a-locked-wrapper-type"}},[n("code",[s._v("Locked")]),s._v(" 包装器")]),s._v(" 的 "),n("a",{attrs:{href:"https://docs.rs/spin/0.5.0/spin/struct.Mutex.html#method.lock",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Mutex::lock")]),n("OutboundLink")],1),s._v(" 函数拿到 "),n("code",[s._v("&mut LinkedListAllocator")]),s._v(" 引用。然后调用 "),n("code",[s._v("add_free_region")]),s._v(" 函数把释放的区域添加到空闲列表。")],1),s._v(" "),n("p",[n("code",[s._v("alloc")]),s._v(" 方法会复杂一些。它首先执行同样的布局对齐工作，并调用 "),n("a",{attrs:{href:"https://docs.rs/spin/0.5.0/spin/struct.Mutex.html#method.lock",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Mutex::lock")]),n("OutboundLink")],1),s._v(" 函数拿到可修改的分配器引用。然后调用 "),n("code",[s._v("find_region")]),s._v(" 方法找到满足分配需求的内存区域，将其从链表移出。如果没有成功则返回 "),n("code",[s._v("None")]),s._v("，它会返回 "),n("code",[s._v("null_mut")]),s._v(" 用于提示没有合适内存区域用于分配的错误。")]),s._v(" "),n("p",[s._v("成功时，"),n("code",[s._v("find_region")]),s._v(" 方法返回合适区域（已不在链表中）和分配的起始地址组成的元组。基于 "),n("code",[s._v("alloc_start")]),s._v("、分配大小和区域的结束地址，再次计算分配的结束地址和超出的大小。如果超出的大小不为空，调用 "),n("code",[s._v("add_free_region")]),s._v(" 把超出部分添回空闲列表。最后，返回强转为 "),n("code",[s._v("*mut u8")]),s._v(" 指针的 "),n("code",[s._v("alloc_start")]),s._v(" 地址。")]),s._v(" "),n("h4",{attrs:{id:"调整内存布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调整内存布局"}},[s._v("#")]),s._v(" 调整内存布局")]),s._v(" "),n("p",[s._v("那么 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 开始部分的内存布局对齐又是什么鬼？它们确保每次分配的块都能够存储一个 "),n("code",[s._v("ListNode")]),s._v("。因为内存块会在某个时间点被释放，那时我们想往里面写入一个 "),n("code",[s._v("ListNode")]),s._v("，所以这一点是非常重要的。块比 "),n("code",[s._v("ListNode")]),s._v(" 要小或者没有正确对齐的情况会触发未定义行为。")]),s._v(" "),n("p",[n("code",[s._v("size_align")]),s._v(" 函数负责调整内存布局，定义如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/linked_list.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Adjust the given layout so that the resulting allocated memory")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// region is also capable of storing a `ListNode`.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the adjusted size and alignment as a (size, align) tuple.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("size_align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" layout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" layout\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_to")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("expect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"adjusting alignment failed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pad_to_align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("首先这个函数在传入的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/alloc/struct.Layout.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Layout")]),n("OutboundLink")],1),s._v(" 上使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.align_to",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("align_to")]),n("OutboundLink")],1),s._v(" 方法，把对齐加到 "),n("code",[s._v("ListNode")]),s._v(" 需要的水平。然后使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.pad_to_align",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("pad_to_align")]),n("OutboundLink")],1),s._v(" 方法把大小约近到对齐的整数倍，从而确保下一个内存块的起始地址也会有正确的对齐方式用于存储 "),n("code",[s._v("ListNode")]),s._v("。")]),s._v(" "),n("p",[s._v("接下来的一步，它使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.max",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("max")]),n("OutboundLink")],1),s._v(" 方法确保容纳 "),n("code",[s._v("mem::size_of::<ListNode>")]),s._v(" 所需的最小空间分配。这样之后，"),n("code",[s._v("dealloc")]),s._v(" 函数就可以安全把一个 "),n("code",[s._v("ListNode")]),s._v(" 写入到空闲的内存块了。")]),s._v(" "),n("h3",{attrs:{id:"使用它-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用它-2"}},[s._v("#")]),s._v(" 使用它")]),s._v(" "),n("p",[s._v("现在我们可以更新 "),n("code",[s._v("allocator")]),s._v(" 模块的静态变量 "),n("code",[s._v("ALLOCATOR")]),s._v("，启用新的 "),n("code",[s._v("LinkedListAllocator")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("linked_list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[global_allocator]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ALLOCATOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedListAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("由于 "),n("code",[s._v("init")]),s._v(" 函数对于粗块式和链表式分配器保持一致，我们不需要更新 "),n("code",[s._v("init_heap")]),s._v(" 里面调用的 "),n("code",[s._v("init")]),s._v("。")]),s._v(" "),n("p",[s._v("现在再次运行 "),n("code",[s._v("heap_allocation")]),s._v(" 测试，可以看到所有测试都通过了，包括在粗块分配器情况下失败的 "),n("code",[s._v("many_boxes_long_lived")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" --test heap_allocation\nsimple_allocation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nlarge_vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes_long_lived"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这表明我们的链表式分配器能够重用释放的内存用于后续分配。")]),s._v(" "),n("h3",{attrs:{id:"讨论-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#讨论-2"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),n("p",[s._v("和粗块分配器相比，链表式分配器作为通用的分配要合适很多，主要原因是它能够直接复用释放的内存。然而，它也有一些缺点。某些缺点只是我们粗糙实现带来的，但是这种分配器方案自身还有一些基本的缺点。")]),s._v(" "),n("h4",{attrs:{id:"合并释放的内存块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合并释放的内存块"}},[s._v("#")]),s._v(" 合并释放的内存块")]),s._v(" "),n("p",[s._v("我们实现的主要问题是它只会把堆分小块，但从不把他们合并回来。考虑以下情况：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(569),alt:""}})]),s._v(" "),n("p",[s._v("第一行在堆上分配了三块区域。其中两块在第二行释放掉，第三块在第三行释放掉。现在整个堆再次回归空闲状态，但是仍然切分为四个独立块。此时，由于四个块都不够大，一个大的内存分配就有可能不再行了。随着时间推移，这个过程会发展，堆会被切分为越来越小的块。终有一天，堆变得过于碎片化，使得即使常规大小的分配都会失败。")]),s._v(" "),n("p",[s._v("为了解决这个问题，我们需要把相邻的空闲块重新合并回来。对于上述例子，这意味着：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(570),alt:""}})]),s._v(" "),n("p",[s._v("和之前一样，三块区域中的两块在第 "),n("code",[s._v("2")]),s._v(" 行被释放掉。我们现在第 "),n("code",[s._v("2a")]),s._v(" 行多加一步，把最右的两块合并到一起，而不是维持碎片化的两块。第 "),n("code",[s._v("3")]),s._v(" 行时，第三块区域和之前一样被释放掉，使得完全空闲的整个堆变成了三个不同块。我们新加一步 "),n("code",[s._v("3a")]),s._v(" 把三个相邻块重新合并到一起。")]),s._v(" "),n("p",[n("code",[s._v("linked_list_allocator")]),s._v(" 包的合并策略如下：调用 "),n("code",[s._v("deallocate")]),s._v(" 时，总是保持链表根据起始地址排序，而不是把空闲块插入链表开头。这样一来，调用 "),n("code",[s._v("deallocate")]),s._v(" 时通过检查列表中两个相邻块的地址和大小即可直接执行合并操作。当然，内存释放操作因此变慢了，但是能够防止我们前面看到的堆碎片化的问题。")]),s._v(" "),n("h4",{attrs:{id:"性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[s._v("#")]),s._v(" 性能")]),s._v(" "),n("p",[s._v("综上可知，粗块分配器非常快，且可以又优化为几条汇编操作。链表式分配器在这方面变现要差很多。问题出在分配请求可能需要遍历整个链表直至找到合适的区块。")]),s._v(" "),n("p",[s._v("由于链表长度取决于空闲内存块的数目，不同程序的性能表现差异很大。只创建几个分配的程序会体会到异常快的分配性能。然而，对于有很多区域导致堆碎片化的程序，分配的性能就会非常差，因为列表会变得非常长且大部分都是小块。")]),s._v(" "),n("p",[s._v("值得注意的是这个性能缺陷不是我们的粗糙实现导致的问题，而是链表方案的基本问题。由于分配性能对于内核级别的代码非常重要，我们以下部分探索第三种分配器方案，降低内存使用率来换取性能提升。")]),s._v(" "),n("h2",{attrs:{id:"固定块式分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#固定块式分配器"}},[s._v("#")]),s._v(" 固定块式分配器")]),s._v(" "),n("p",[s._v("后续部分，我们展示一种使用固定大小的内存块来处理分配请求的分配方案。这种方案下，分配通常返回大于所需分配内存的块，会由于 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)#Internal_fragmentation",target:"_blank",rel:"noopener noreferrer"}},[s._v("内部碎片"),n("OutboundLink")],1),s._v(" 导致内存浪费。但另一方面，它极大地降低了寻找合适块的时间（和链表式分配器相比），从而实现更好的分配性能。")]),s._v(" "),n("h4",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[n("em",[s._v("固定块式分配器")]),s._v(" 的思想为：定义少数块尺寸，把每次分配约近到能容纳它的最小块，而不是只分配需求的尺寸。例如，对于 16、64 和 512 字节的块尺寸，分配 4 字节会返回 16 字节的块，分配 48 字节会返回 64 字节的块，分配 128 字节会返回 512 字节的块。")]),s._v(" "),n("p",[s._v("和链表式分配器类似，我们在空闲的内存区域创建链表用于追踪可用内存。但是，这次我们是为每种尺寸创建独立的链表，而不是只有包含不同大小区块的一个链表。每个链表志村出单一尺寸的区块。例如，对于 16、64 和 512 三种区块大小，内存中会有三个独立的链表：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(571),alt:""}}),s._v(".")]),s._v(" "),n("p",[s._v("和之前的单 "),n("code",[s._v("head")]),s._v(" 指针不同，我们现在有了三个头指针 "),n("code",[s._v("head_16")]),s._v("、"),n("code",[s._v("head_64")]),s._v(" 和 "),n("code",[s._v("head_512")]),s._v("，每个分别指向对应大小链表的第一块空闲区块。每条链表的节点大小相同。例如，以 "),n("code",[s._v("head_16")]),s._v(" 开头的链表只包含 16 字节的区块。通过头部指针的名字即可看出大小，这意味着我们不在需要在链表节点里存储区块尺寸了。")]),s._v(" "),n("p",[s._v("由于每个列表的元素大小相同，每个链表元素都是同样适用于内存分配请求的。这意味着我们可以通过以下步骤非常高效地执行分配：")]),s._v(" "),n("ul",[n("li",[s._v("把请求分配的内存大小约近到能容纳它的最小区块。例如，对于 12 字节的请求，我们会选择上面例子中 16 字节的区块")]),s._v(" "),n("li",[s._v("从列表（例如，数组）找到对应的头部指针。对于 16 字节的区块，我们需要使用 "),n("code",[s._v("head_16")])]),s._v(" "),n("li",[s._v("从链表移除第一块，并返回这一块")])]),s._v(" "),n("p",[s._v("最明显的是，我们总是返回列表的第一个元素即可，不再需要遍历整个链表。因此，分配要比链表式分配器来快很多。")]),s._v(" "),n("h4",{attrs:{id:"区块大小和浪费的内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#区块大小和浪费的内存"}},[s._v("#")]),s._v(" 区块大小和浪费的内存")]),s._v(" "),n("p",[s._v("根据区块尺寸的不同，约近处理会损失很多内存。例如，为 128 字节的分配请求返回 512 字节的区块时，四分之三的分配内存会被闲置。定义合理的区块大小可以在一定程度上限制浪费的内存。例如，使用 2 的次幂（4、8、16、32、64、128、...）作为区块大小，最坏情况下的内存浪费为所分配内存的一半，平均情况下则为四分之一。")]),s._v(" "),n("p",[s._v("根据程序的常用过内存分配尺寸来优化区块尺寸的定义也是常见的。例如，对于经常进行 24 字节分配的程序，我们可以额外添加 24 字节的区块来提供内存使用率。这样，浪费的内存大小经常可以在没有性能损失的情况下被降低。")]),s._v(" "),n("h4",{attrs:{id:"内存释放"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存释放"}},[s._v("#")]),s._v(" 内存释放")]),s._v(" "),n("p",[s._v("和分配类似，释放也是非常高效的，涉及以下步骤：")]),s._v(" "),n("ul",[n("li",[s._v("把释放的内存大小约近到能容纳它的最小区块尺寸。因为编译器只会把请求分配的大小传给 "),n("code",[s._v("dealloc")]),s._v("，而不是 "),n("code",[s._v("alloc")]),s._v(" 时返回的区块大小，所以这一步是必要的。在 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 使用相同的尺寸调整函数，可以确保我们总是释放正确大小的内存")]),s._v(" "),n("li",[s._v("从列表（例如，数组）找到对应的头部指针")]),s._v(" "),n("li",[s._v("把释放的区块添加到列表中，更新头部指针")])]),s._v(" "),n("p",[s._v("最明显的是，释放流程也不需要遍历整个链表。这意味着调用 "),n("code",[s._v("dealloc")]),s._v(" 的所需时间不会随链表长度变化。")]),s._v(" "),n("h4",{attrs:{id:"后备分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后备分配器"}},[s._v("#")]),s._v(" 后备分配器")]),s._v(" "),n("p",[s._v("考虑到大内存（>2KB）分配通常比较少，尤其对于操作系统内核，所以处理这些分配请求时回退到使用另外的分配器比较合理。例如，为了降低内存浪费率，分配大于 2048 字节的内存时，我们回退使用链表式分配器。由于这些大小的分配预期只有少数，这个后备链表会保持比较小使得分配/释放仍然相当快。")]),s._v(" "),n("h4",{attrs:{id:"创建新区块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建新区块"}},[s._v("#")]),s._v(" 创建新区块")]),s._v(" "),n("p",[s._v("前面我们总是假设每种大小的链表总有足够的区块满足所有所有的分配请求。然而，有时某种区块大小的链表变空了。这种情况下，有两种创建指定大小的新空闲区块用于处理分配请求的方法：")]),s._v(" "),n("ul",[n("li",[s._v("从后备分配器（如果有的话）分配一个新块")]),s._v(" "),n("li",[s._v("切分其他链表的一个更大的区块。区块大小为 2 的次幂时，这种方式最优。例如，把 32 字节的区块切分为两个 16 字节的区块")])]),s._v(" "),n("p",[s._v("由于实现起来更加简单，我们的实现从后备分配器分配新区块。")]),s._v(" "),n("h3",{attrs:{id:"实现-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-3"}},[s._v("#")]),s._v(" 实现")]),s._v(" "),n("p",[s._v("了解固定块式分配器的工作原理后，我们现在可以开始着手实现了。由于不依赖前一节实现的链表式分配器，即使跳过链表式分配器的实现我们也能进行这一节的内容。")]),s._v(" "),n("h4",{attrs:{id:"链表节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链表节点"}},[s._v("#")]),s._v(" 链表节点")]),s._v(" "),n("p",[s._v("实现的第一步是在新的 "),n("code",[s._v("allocator::fixed_size_block")]),s._v(" 模块新建一个 "),n("code",[s._v("ListNode")]),s._v(" 类型：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[s._v("fixed_size_block")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这个类型和 "),n("a",{attrs:{href:"#the-allocator-type"}},[s._v("链表式分配实现")]),s._v(" 的 "),n("code",[s._v("ListNode")]),s._v(" 类型类似，只是没有 "),n("code",[s._v("size")]),s._v(" 字段。因为固定块式分配器的每条链表的所有区块大小相同，所以 "),n("code",[s._v("size")]),s._v(" 字段不需要了。")]),s._v(" "),n("h4",{attrs:{id:"区块大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#区块大小"}},[s._v("#")]),s._v(" 区块大小")]),s._v(" "),n("p",[s._v("然后，定义一个常量切片 "),n("code",[s._v("BLOCK_SIZES")]),s._v("，指定我们实现用到的区块大小：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// The block sizes to use.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// The sizes must each be power of 2 because they are also used as")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// the block alignment (alignments must be always powers of 2).")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("256")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2048")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("对于区块尺寸，我们使用 8 到 2048 区间内的 2 的次幂。因为下一个区块释放时，每个区块必须能够存储一个 64 字节的指针，所以我们不定义小于 8 的区块尺寸。对于大于 2048 字节的分配，我们回退到使用链表式分配器。")]),s._v(" "),n("p",[s._v("为了简化实现，我们要求区块大小也需要内存对齐。所以一个 16 字节的区块总是对齐到 16 字节的边界，一个 512 字节的区块对齐到 512 字节的边界。由于对齐总是需要是 2 的次幂，这个规则过滤掉了其他区块大小。如果将来需要非 2 的次幂大小的区块时，我们依然能够为此调整实现（例如，定义一个额外的 "),n("code",[s._v("BLOCK_ALIGNMENTS")]),s._v(" 数组）。")]),s._v(" "),n("h4",{attrs:{id:"分配器类型-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分配器类型-2"}},[s._v("#")]),s._v(" 分配器类型")]),s._v(" "),n("p",[s._v("借助 "),n("code",[s._v("ListNode")]),s._v(" 类型和 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 切片，我们现在可以定义如下分配器类型了：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[s._v("FixedSizeBlockAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token lifetime-annotation symbol"}},[s._v("'static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    fallback_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("linked_list_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Heap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("code",[s._v("list_heads")]),s._v(" 字段是一个 "),n("code",[s._v("head")]),s._v(" 指针的数组，每个区块对应一个。具体实现为用 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 切片的 "),n("code",[s._v("len()")]),s._v(" 作为数组长度。"),n("code",[s._v("linked_list_allocator")]),s._v(" 提供的分配器用作后备分配器，用于处理大于最大区块大小的分配请求。当然也可以使用之前我们自己实现的 "),n("code",[s._v("LinkedListAllocator")]),s._v("，但是那个实现具有不会 "),n("a",{attrs:{href:"#merging-freed-blocks"}},[s._v("合并空闲区块")]),s._v(" 的缺点。")]),s._v(" "),n("p",[s._v("为了构造 "),n("code",[s._v("FixedSizeBlockAllocator")]),s._v("，我们也提供和其他分配器一样的 "),n("code",[s._v("new")]),s._v(" 和 "),n("code",[s._v("init")]),s._v(" 函数：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Creates an empty FixedSizeBlockAllocator.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Self")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            fallback_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("linked_list_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Heap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("empty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Initialize the allocator with the given heap bounds.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This function is unsafe because the caller must guarantee that the given")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// heap bounds are valid and that the heap is unused. This method must be")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// called only once.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fallback_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("heap_start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[n("code",[s._v("new")]),s._v(" 函数只用空节点初始化 "),n("code",[s._v("list_heads")]),s._v(" 数组，创建一个 "),n("a",{attrs:{href:"https://docs.rs/linked_list_allocator/0.8.6/linked_list_allocator/struct.Heap.html#method.empty",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("empty")]),n("OutboundLink")],1),s._v(" 的链表式分配器作为 "),n("code",[s._v("fallback_allocator")]),s._v("。由于数组初始化使用非 "),n("code",[s._v("Copy")]),s._v(" 类型是一个仍然不稳定的特性，我们需要在 "),n("code",[s._v("lib.rs")]),s._v(" 开头添加 "),n("strong",[n("code",[s._v("#![feature(const_in_array_repeat_expressions)]")])]),s._v("。当前场景下 "),n("code",[s._v("None")]),s._v(" 不能 "),n("code",[s._v("Copy")]),s._v(" 是因为 "),n("code",[s._v("ListNode")]),s._v(" 没有实现 "),n("code",[s._v("Copy")]),s._v("。因此，"),n("code",[s._v("Option")]),s._v(" 包装器和它的 "),n("code",[s._v("None")]),s._v(" 枚举值也不是 "),n("code",[s._v("Copy")]),s._v("。")]),s._v(" "),n("p",[s._v("不安全的 "),n("code",[s._v("init")]),s._v(" 函数只调用 "),n("code",[s._v("fallback_allocator")]),s._v(" 的 "),n("a",{attrs:{href:"https://docs.rs/linked_list_allocator/0.8.6/linked_list_allocator/struct.Heap.html#method.init",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("init")]),n("OutboundLink")],1),s._v(" 函数，没有对 "),n("code",[s._v("list_heads")]),s._v(" 数组执行额外的初始化操作。我们会在 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 调用时对 "),n("code",[s._v("list_heads")]),s._v(" 执行懒初始化。")]),s._v(" "),n("p",[s._v("为了方便，我们还创建了一个私有的 "),n("code",[s._v("fallback_alloc")]),s._v(" 方法，使用 "),n("code",[s._v("fallback_allocator")]),s._v(" 进行分配操作：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Allocates using the fallback allocator.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("fallback_alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fallback_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("allocate_first_fit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Ok")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("as_ptr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Err")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("null_mut")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("由于 "),n("code",[s._v("linked_list_allocator")]),s._v(" 包的 "),n("a",{attrs:{href:"https://docs.rs/linked_list_allocator/0.6.4/linked_list_allocator/struct.Heap.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Heap")]),n("OutboundLink")],1),s._v(" 类型没有实现 "),n("code",[s._v("GlobalAlloc")]),s._v("（因为 "),n("a",{attrs:{href:"#globalalloc-and-mutability"}},[s._v("没有锁是不可能的")]),s._v("）。它提供一个接口稍微不同的 "),n("a",{attrs:{href:"https://docs.rs/linked_list_allocator/0.6.4/linked_list_allocator/struct.Heap.html#method.allocate_first_fit",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("allocate_first_fit")]),n("OutboundLink")],1),s._v(" 方法。这个方法返回一个 "),n("code",[s._v("Result<NonNull<u8>, ()>")]),s._v("，而不是返回一个 "),n("code",[s._v("*mut u8")]),s._v(" 并用空指针表示错误。"),n("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/ptr/struct.NonNull.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("NonNull")]),n("OutboundLink")],1),s._v(" 类型是对裸指针的抽象，表明裸指针非空。"),n("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/alloc/struct.AllocErr.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("AllocErr")]),n("OutboundLink")],1),s._v(" 类型则是提示分配错误的标记类型。把 "),n("code",[s._v("Ok")]),s._v(" 情况映射到 "),n("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/ptr/struct.NonNull.html#method.as_ptr",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("NonNull::as_ptr")]),n("OutboundLink")],1),s._v(" 方法并把 "),n("code",[s._v("Err")]),s._v(" 情况映射为空指针，我们很容易把这个转换回 "),n("code",[s._v("*mut u8")]),s._v(" 类型。")]),s._v(" "),n("h4",{attrs:{id:"计算列表索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算列表索引"}},[s._v("#")]),s._v(" 计算列表索引")]),s._v(" "),n("p",[s._v("在实现 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait 之前，我们定义一个辅助函数 "),n("code",[s._v("list_index")]),s._v("，用于计算给定 "),n("a",{attrs:{href:"https://doc.rust-lang.org/alloc/alloc/struct.Layout.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Layout")]),n("OutboundLink")],1),s._v(" 所需的最小区块尺寸。")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Choose an appropriate block size for the given layout.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("///")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns an index into the `BLOCK_SIZES` array.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("list_index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Option")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("usize")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" required_block_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("iter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("position")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token closure-params"}},[n("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),n("span",{pre:!0,attrs:{class:"token closure-punctuation punctuation"}},[s._v("|")])]),s._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" required_block_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("区块的大小和对齐必须满足给定 "),n("code",[s._v("Layout")]),s._v(" 的要求。由于我们定义区块大小也是它的对齐，所以 "),n("code",[s._v("required_block_size")]),s._v(" 是内存布局的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.size",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("size()")]),n("OutboundLink")],1),s._v(" 方法返回值和 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/alloc/struct.Layout.html#method.align",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("align()")]),n("OutboundLink")],1),s._v(" 属性中 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/cmp/trait.Ord.html#method.max",target:"_blank",rel:"noopener noreferrer"}},[s._v("更大"),n("OutboundLink")],1),s._v(" 的那个。为了找出 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 切片中合适的区块，我们首先使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.slice.html#method.iter",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("iter()")]),n("OutboundLink")],1),s._v(" 方法获得一个迭代器，然后调用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/iter/trait.Iterator.html#method.position",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("position()")]),n("OutboundLink")],1),s._v(" 方法找第一个起码和 "),n("code",[s._v("required_block_size")]),s._v(" 一样大的区块。")]),s._v(" "),n("p",[s._v("需要注意的是我们没有返回区块尺寸本身，而是对应大小在 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 切片中的索引。理由是我们想用这个索引直接作为 "),n("code",[s._v("list_heads")]),s._v(" 数组的索引。")]),s._v(" "),n("h4",{attrs:{id:"实现-globalalloc-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-globalalloc-3"}},[s._v("#")]),s._v(" 实现 "),n("code",[s._v("GlobalAlloc")])]),s._v(" "),n("p",[s._v("最后一步是实现 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GlobalAlloc")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("todo!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("todo!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("和其他分配器一样，我们没有实现让分配器直接实现 "),n("code",[s._v("GlobalAlloc")]),s._v(" trait，而是借助 "),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/11-allocator-designs/#a-locked-wrapper-type"}},[n("code",[s._v("Locked")]),s._v(" 包装器")]),s._v(" 添加阻塞的内部可更改性。由于 "),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 实现比较大，我们后续部分逐一介绍。")],1),s._v(" "),n("h5",{attrs:{id:"alloc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alloc"}},[s._v("#")]),s._v(" "),n("code",[s._v("alloc")])]),s._v(" "),n("p",[n("code",[s._v("alloc")]),s._v(" 方法的实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in `impl` block in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" allocator "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    node "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// no block exists in list => allocate new block")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" block_size "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// only works if all block sizes are a power of 2")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" block_align "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" block_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" layout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("from_size_align")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("block_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" block_align"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("fallback_alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("fallback_alloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("让我们一步一步拆解来看：")]),s._v(" "),n("p",[s._v("首先，我们调用 "),n("code",[s._v("Locked::lock")]),s._v(" 方法得到一个被包装的分配器实例的可变引用。然后，调用刚才定义的 "),n("code",[s._v("list_index")]),s._v(" 函数计算适用于给定内存的区块大小，得到 "),n("code",[s._v("list_heads")]),s._v(" 数组的相应索引。如果索引为 "),n("code",[s._v("None")]),s._v("，则没有区块能够满足这次分配请求，因此，调用 "),n("code",[s._v("fallback_allocator")]),s._v(" 的 "),n("code",[s._v("fallback_alloc")]),s._v(" 函数。")]),s._v(" "),n("p",[s._v("如果链表索引为 "),n("code",[s._v("Some")]),s._v("，我们尝试调用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/option/enum.Option.html#method.take",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Option::take")]),n("OutboundLink")],1),s._v(" 方法从 "),n("code",[s._v("list_heads[index]")]),s._v(" 开头的链表移出第一个节点。如果链表非空，我们会进入到 "),n("code",[s._v("match")]),s._v(" 语句的 "),n("code",[s._v("Some(node)")]),s._v(" 分支，这里我们把链表的头节点指向被移除节点的后继节点（再次使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/option/enum.Option.html#method.take",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("take")]),n("OutboundLink")],1),s._v("）。最后以 "),n("code",[s._v("*mut u8")]),s._v(" 的形式返回移除的 "),n("code",[s._v("node")]),s._v(" 指针。")]),s._v(" "),n("p",[s._v("如果链表头部节点为 "),n("code",[s._v("None")]),s._v("，则这个链表已经没有区块了。这意味着我们需要按照 "),n("a",{attrs:{href:"#creating-new-blocks@TODO"}},[s._v("前面描述")]),s._v(" 的那样构造一个新的区块。为此，我们首先从 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 切片获得当前区块大小，把它作为新区块的大小和对齐方式。然后，基于这个新区块创建新的 "),n("code",[s._v("Layout")]),s._v("，调用 "),n("code",[s._v("fallback_alloc")]),s._v(" 方法执行分配操作。调整内存布局和对齐方式的原因是释放内存时这个区块会被放回到相应的区块链表。")]),s._v(" "),n("h4",{attrs:{id:"dealloc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dealloc"}},[s._v("#")]),s._v(" "),n("code",[s._v("dealloc")])]),s._v(" "),n("p",[n("code",[s._v("dealloc")]),s._v(" 方法的实现如下：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator/fixed_size_block.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NonNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// inside the `unsafe impl GlobalAlloc` block")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsafe")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("dealloc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Layout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" allocator "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lock")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("match")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" new_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// verify that block has size and alignment required for storing node")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("size_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("assert!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("mem"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("align_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BLOCK_SIZES")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" new_node_ptr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ptr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            new_node_ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("new_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_heads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Some")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("new_node_ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ptr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NonNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("unwrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fallback_allocator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("deallocate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ptr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" layout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[s._v("和 "),n("code",[s._v("alloc")]),s._v(" 类似，我们首先调用 "),n("code",[s._v("lock")]),s._v(" 方法得到分配器的可更改版引用，然后调用 "),n("code",[s._v("list_index")]),s._v(" 函数获得给定 "),n("code",[s._v("Layout")]),s._v(" 对应的区块链表。如果索引为 "),n("code",[s._v("None")]),s._v("，则 "),n("code",[s._v("BLOCK_SIZES")]),s._v(" 没有合适的区块，这意味着此次分配由后备分配器负责创建。因此，我们使用 "),n("a",{attrs:{href:"https://docs.rs/linked_list_allocator/0.6.4/linked_list_allocator/struct.Heap.html#method.deallocate",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("deallocate")]),n("OutboundLink")],1),s._v(" 再次释放内存。这个方法期望一个 "),n("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/ptr/struct.NonNull.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("NonNull")]),n("OutboundLink")],1),s._v(" 而不是 "),n("code",[s._v("*mut u8")]),s._v("，所以我们需要先转换指针。（"),n("code",[s._v("unwrap")]),s._v(" 的调用只会在指针为空时失败，而编译器调用 "),n("code",[s._v("dealloc")]),s._v(" 时这个情况应该绝不会发生。）")]),s._v(" "),n("p",[s._v("如果 "),n("code",[s._v("list_index")]),s._v(" 返回一个区块索引，我们需要把空闲的内存块添加到链表中。为此，我们首先创建一个新的 "),n("code",[s._v("ListNode")]),s._v("，指向当前链表头部（再次调用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/core/option/enum.Option.html#method.take",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("Option::take")]),n("OutboundLink")],1),s._v("）。把释放的内存块写入新节点之前，先断言 "),n("code",[s._v("index")]),s._v(" 关联的当前区块具有要求的大小和对齐方式用于存储 "),n("code",[s._v("ListNode")]),s._v("。然后通过将给定的 "),n("code",[s._v("*mut u8")]),s._v(" 指针转化为 "),n("code",[s._v("*mut ListNode")]),s._v(" 指针的方式执行写入，再调用其不安全的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.pointer.html#method.write",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("write")]),n("OutboundLink")],1),s._v(" 方法。由于我们调用了它的 "),n("code",[s._v("take")]),s._v(" 方法，所以这个指针的当前值为 "),n("code",[s._v("None")]),s._v("，所以最后一步是设置链表的头部指针为新写入的 "),n("code",[s._v("ListNode")]),s._v("。为此我们把裸的 "),n("code",[s._v("new_node_ptr")]),s._v(" 指针转换为一个可变引用：")]),s._v(" "),n("p",[s._v("有以下几项值得留意一下：")]),s._v(" "),n("ul",[n("li",[s._v("我们没有区分从区块链表和后备分配器分配的区块。这意味着 "),n("code",[s._v("alloc")]),s._v(" 创建的新块会在 "),n("code",[s._v("dealloc")]),s._v(" 时添加到区块链表，因此会增多那种尺寸的区块数目")]),s._v(" "),n("li",[n("code",[s._v("alloc")]),s._v(" 方法是我们实现中唯一创建新块的地方。这意味着我们一开始只有一个空区块链表，只会在某个区块大小的分配执行时懒加载式地填充链表")]),s._v(" "),n("li",[s._v("即使我们执行了不安全的操作，"),n("code",[s._v("alloc")]),s._v(" 和 "),n("code",[s._v("dealloc")]),s._v(" 内部也不需要 "),n("code",[s._v("unsafe")]),s._v(" 块。因为当前 Rust 把 unsafe 函数的整个函数看做一个大的 "),n("code",[s._v("unsafe")]),s._v(" 区块。由于使用显式的 "),n("code",[s._v("unsafe")]),s._v(" 块具有能够明显区分安全操作和非安全操作的好处，所以有人提出一个 "),n("a",{attrs:{href:"https://github.com/rust-lang/rfcs/pull/2585",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC"),n("OutboundLink")],1),s._v(" 来更新这个行为")])]),s._v(" "),n("h3",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),n("p",[s._v("为了使用新的 "),n("code",[s._v("FixedSizeBlockAllocator")]),s._v("，我们需要更新 "),n("code",[s._v("allocator")]),s._v(" 模块的静态变量 "),n("code",[s._v("ALLOCATOR")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in src/allocator.rs")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("fixed_size_block"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[global_allocator]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ALLOCATOR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Locked")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FixedSizeBlockAllocator")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("由于 "),n("code",[s._v("init")]),s._v(" 函数对于我们显示的所有分配都是一样的，我们不需要修改 "),n("code",[s._v("init_heap")]),s._v(" 里面的 "),n("code",[s._v("init")]),s._v(" 调用。")]),s._v(" "),n("p",[s._v("再次运行 "),n("code",[s._v("heap_allocation")]),s._v(" 测试，可以看到所有测试仍然是通过的：")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" --test heap_allocation\nsimple_allocation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nlarge_vec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nmany_boxes_long_lived"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(". "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("新的分配器看起来跑通了！")]),s._v(" "),n("h3",{attrs:{id:"讨论-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#讨论-3"}},[s._v("#")]),s._v(" 讨论")]),s._v(" "),n("p",[s._v("虽然固定块式分配器的方式要比链表式的具有好得多的性能，但是使用 2 的次幂作为区块尺寸时它能够浪费的内存高达总内存一半。这种权衡涉及是否值得要依应用类型而定。操作系统内核对性能要求贼高，所以固定块式的方式看起来是更优的选择。")]),s._v(" "),n("p",[s._v("实现方面的话，还有几个地方是我们能够优化的：")]),s._v(" "),n("ul",[n("li",[s._v("预填充链表可以提供初始化分配的性能可能会更好，而不是只用后备分配器懒加载式分配区块")]),s._v(" "),n("li",[s._v("为了简化实现，我们只允许 2 的次幂大小的区块，使得它们也能作为区块的对齐量。通过用不同的方式存储（或计算）对齐量的话，我们也可以允许任何其他区块大小。这样一来，我们添加处更多区块尺寸，例如常用的分配大小，从而最小化浪费的内存")]),s._v(" "),n("li",[s._v("目前我们只创建新块，但从不再次释放它们。这会导致碎片化，也可能最终分配大内存时失败。限定每种区块尺寸的链表长度可能比较合理。达到最大长度后，后续释放操作在后备分配器进行，而不是放回链表")]),s._v(" "),n("li",[s._v("与其回退到链表式分配器，我们可以用一个特殊的分配器处理大于 4KiB 的内存分配。思想是利用操作 4KiB 的 "),n("RouterLink",{attrs:{to:"/2020/07/19/blog-os-08-intro-to-paging/"}},[s._v("分页")]),s._v("，把连续的虚拟内存映射到不连续的物理内存。这样的话，空闲内存的碎片化就不再是大内存分配面对的问题了")],1),s._v(" "),n("li",[s._v("利用这样的分配器，把区块大小递增到 4KiB 和完全移除链表式分配器是可能比较合理的。这样做的好处是能够降低碎片率和提高性能的可预测度，即更好的最坏性能")])]),s._v(" "),n("p",[s._v("尤其需要注意的是上面提到的实现优化只是建议。操作系统内核的分配通常会为特定的内核工作进行高度优化，这种优化只有在大量观测后才能有可能。")]),s._v(" "),n("h3",{attrs:{id:"变体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变体"}},[s._v("#")]),s._v(" 变体")]),s._v(" "),n("p",[s._v("固定块式分配器方案也有很多种变体。其中两个受欢迎的是 "),n("em",[s._v("slab 分配器")]),s._v(" 和 "),n("em",[s._v("buddy 分配器")]),s._v("，也被用于诸如 Linux 等流行内核。以下部分将会简要介绍这两种方案。")]),s._v(" "),n("h4",{attrs:{id:"slab-分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slab-分配器"}},[s._v("#")]),s._v(" Slab 分配器")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Slab_allocation",target:"_blank",rel:"noopener noreferrer"}},[s._v("slab 分配器"),n("OutboundLink")],1),s._v(" 背后的思想是使用直接对应到内核选定类型的区块尺寸。这样一来，这些类型的分配刚好能够纳入一个块，也就没有内存浪费一说了。有时甚至可以在空闲块中预初始化类型实例来进一步提升性能。")]),s._v(" "),n("p",[s._v("Slab 分配器通常和其他分配器结合使用。例如，它可以和固定块式分配器一起用来进一步切分已分配的区块，从而减少内存浪费。这种方案通常基于一个分配的大内存实现 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Object_pool_pattern",target:"_blank",rel:"noopener noreferrer"}},[s._v("对象池模式"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"buddy-分配器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#buddy-分配器"}},[s._v("#")]),s._v(" Buddy 分配器")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Buddy_memory_allocation",target:"_blank",rel:"noopener noreferrer"}},[s._v("buddy 分配器"),n("OutboundLink")],1),s._v(" 方案使用 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Binary_tree",target:"_blank",rel:"noopener noreferrer"}},[s._v("二叉树"),n("OutboundLink")],1),s._v(" 数据结构和 2 次幂区块尺寸来管理空闲的区块，而不是使用链表。特定大小的区块需要时，它会把一个更大的区块对半分，因此创建在树中创建出两个子节点。每次区块被释放时会分析相邻区块。如果相邻节点也是空闲的话，两个区块会合并到一起成为一个翻倍大小的区块。")]),s._v(" "),n("p",[s._v("这个合并操作的的好处是能够降低 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)#External_fragmentation",target:"_blank",rel:"noopener noreferrer"}},[s._v("外部碎片化"),n("OutboundLink")],1),s._v("，使得小的空闲块能够复用于大的内存分配。它也没有使用后备分配器，所以性能要更加容易预测。最大的缺点是只支持 2 次幂的区块尺寸，这样有可能会因 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)#Internal_fragmentation",target:"_blank",rel:"noopener noreferrer"}},[s._v("内部碎片化"),n("OutboundLink")],1),s._v(" 导致大量内存浪费。为此，buddy 分配器通常和 slab 分配器组合使用，进一步将已分配的区块切分为多个小块。")]),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("本文介绍了不同的分配器方案。我们学会如何实现一个基本的 "),n("a",{attrs:{href:"#%E7%B2%97%E5%9D%97%E5%88%86%E9%85%8D%E5%99%A8"}},[s._v("粗块分配器")]),s._v("，这个分配器会通过增加一个单一的 "),n("code",[s._v("next")]),s._v(" 指针实现线性分配内存。虽然粗块分配器分配超速，但是它只会在所有已分配内存都释放后才能复用内存。因此，它很少用作全局分配器。")]),s._v(" "),n("p",[s._v("接下来我们创建了 "),n("a",{attrs:{href:"#%E9%93%BE%E8%A1%A8%E5%88%86%E9%85%8D%E5%99%A8"}},[s._v("链表式内存分配器")]),s._v("，使用空闲内存块本身创建所谓 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Free_list",target:"_blank",rel:"noopener noreferrer"}},[s._v("空闲表"),n("OutboundLink")],1),s._v(" 的链表。这个链表使得存储任何数目不同大小的空闲区块成为可能。虽然没有内存浪费，但是因为一次分配请求可能需要遍历整个链表，导致这个方案的性能比较低。因为没有合并相邻空闲区块到一起，所以我们的实现还会遭受 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)#External_fragmentation",target:"_blank",rel:"noopener noreferrer"}},[s._v("外部碎片化"),n("OutboundLink")],1),s._v(" 的问题。")]),s._v(" "),n("p",[s._v("为了解决链表式方案的性能问题，我们创建了预定义一个固定区块尺寸集合的 "),n("RouterLink",{attrs:{to:"/_post/blog-os-11-allocator-designs/@/second-edition/posts/11-allocator-designs/#fixed-size-block-allocator"}},[s._v("固定块式分配器")]),s._v("。每种区块尺寸都有自己独立的 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Free_list",target:"_blank",rel:"noopener noreferrer"}},[s._v("空闲表"),n("OutboundLink")],1),s._v("，使得分配和释放只需要在链表开头插入/移出即可，因此非常高效。由于每次分配都会约近到下一个较大的区块尺寸，所以会有 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Fragmentation_(computing)#Internal_fragmentation",target:"_blank",rel:"noopener noreferrer"}},[s._v("内粗碎片化"),n("OutboundLink")],1),s._v(" 浪费一些内存。")],1),s._v(" "),n("p",[s._v("还有更多其他权衡不同因素的方案。"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Slab_allocation",target:"_blank",rel:"noopener noreferrer"}},[s._v("slab 分配器"),n("OutboundLink")],1),s._v(" 在优化常见固定大小的结构方面效果挺好，但是不适用于所有场景。"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Buddy_memory_allocation",target:"_blank",rel:"noopener noreferrer"}},[s._v("buddy 分配器"),n("OutboundLink")],1),s._v(" 使用二叉树来把释放的区块重新合并到一起，但是因为只支持 2 次幂的区块尺寸，所以会浪费大量内存。我们还需要谨记：每种内核实现都有各自的流程，所以没有适用所有场景的“最好的”分配器方案。")]),s._v(" "),n("h2",{attrs:{id:"下篇预告"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下篇预告"}},[s._v("#")]),s._v(" 下篇预告")]),s._v(" "),n("p",[s._v("本文结束了我们的内存管理实现。下一步，我们从 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Thread_(computing)",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("线程")]),n("OutboundLink")],1),s._v(" 讲起开始探索 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Computer_multitasking",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("多任务")]),n("OutboundLink")],1),s._v("。后续的文章还会研究 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Multiprocessing",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("多进程")]),n("OutboundLink")],1),s._v("，"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Process_(computing)",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("进程")]),n("OutboundLink")],1),s._v(" 以及 "),n("a",{attrs:{href:"https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html",target:"_blank",rel:"noopener noreferrer"}},[n("em",[s._v("async/await")]),n("OutboundLink")],1),s._v(" 式的合作式多任务管理。")])])}),[],!1,null,null,null);t.default=e.exports}}]);