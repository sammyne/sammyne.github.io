(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{712:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("原文："),a("a",{attrs:{href:"https://os.phil-opp.com/freestanding-rust-binary/",target:"_blank",rel:"noopener noreferrer"}},[s._v("A Freestanding Rust Binary"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("创建自己操作系统内核的第一步是创建一个不链接标准库的 Rust 可执行文件。 这样在没有基础操作系统的情况下即可在 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bare_machine",target:"_blank",rel:"noopener noreferrer"}},[s._v("裸机"),a("OutboundLink")],1),s._v(" 上运行 Rust 代码。")]),s._v(" "),a("p",[s._v("此博客在 "),a("a",{attrs:{href:"https://github.com/phil-opp/blog_os",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHub"),a("OutboundLink")],1),s._v(" 上公开开发。如果您有任何问题或疑问，请在此处打开一个问题。 您也可以在 "),a("a",{attrs:{href:"#valine"}},[s._v("底部")]),s._v(" 发表评论。这篇文章的完整源代码可以在 "),a("a",{attrs:{href:"https://github.com/sammyne/blog-os-cn/tree/master/01-freestanding-rust-binary",target:"_blank",rel:"noopener noreferrer"}},[s._v("blog-os-cn/01-freestanding-rust-binary"),a("OutboundLink")],1),s._v(" 找到。")]),s._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),a("p",[s._v("要编写操作系统（OS）内核，我们需要不依赖于任何操作系统功能的代码。这意味着我们不能使用线程、文件、堆内存、网络、随机数、标准输出或任何其他需要 OS 抽象或特定硬件的功能。这是因为我们正在尝试编写自己的 OS 和驱动程序。")]),s._v(" "),a("p",[s._v("这意味着我们不能使用大多数 "),a("a",{attrs:{href:"https://doc.rust-lang.org/std/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rust 标准库"),a("OutboundLink")],1),s._v("，但是还有很多 Rust 功能是可用的。例如，我们可以使用 "),a("a",{attrs:{href:"https://doc.rust-lang.org/book/ch13-02-iterators.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("迭代器"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"https://doc.rust-lang.org/book/ch13-01-closures.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("闭包"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"https://doc.rust-lang.org/book/ch06-00-enums.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("模式匹配"),a("OutboundLink")],1),s._v("、"),a("a",{attrs:{href:"https://doc.rust-lang.org/core/option/",target:"_blank",rel:"noopener noreferrer"}},[s._v("option"),a("OutboundLink")],1),s._v(" 和 "),a("a",{attrs:{href:"https://doc.rust-lang.org/core/result/",target:"_blank",rel:"noopener noreferrer"}},[s._v("result"),a("OutboundLink")],1),s._v("，"),a("a",{attrs:{href:"https://doc.rust-lang.org/core/macro.write.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("string formatting"),a("OutboundLink")],1),s._v("，当然还有 "),a("a",{attrs:{href:"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("所有权系统"),a("OutboundLink")],1),s._v("。这些功能使得以一种非常有表现力的高级方式编写内核成为可能，而无需担心 "),a("a",{attrs:{href:"https://www.nayuki.io/page/undefined-behavior-in-c-and-cplusplus-programs",target:"_blank",rel:"noopener noreferrer"}},[s._v("不确定的行为"),a("OutboundLink")],1),s._v(" 或 "),a("a",{attrs:{href:"https://tonyarcieri.com/it-s-time-for-a-memory-safety-intervention",target:"_blank",rel:"noopener noreferrer"}},[s._v("内存安全"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("为了在 Rust 中创建 OS 内核，我们需要创建一个无需底层操作系统即可运行的可执行文件。此类可执行文件通常称为“独立式”或“裸机”可执行文件。")]),s._v(" "),a("p",[s._v("本文描述创建一个独立的 Rust 二进制文件的必要步骤，并解释需要这些步骤的原因。如果您仅对一个最小的示例感兴趣，可以 "),a("strong",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[s._v("跳转到总结部分")])]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"禁用标准库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁用标准库"}},[s._v("#")]),s._v(" 禁用标准库")]),s._v(" "),a("p",[s._v("默认情况下，所有 Rust crate 都链接 "),a("a",{attrs:{href:"https://doc.rust-lang.org/std/",target:"_blank",rel:"noopener noreferrer"}},[s._v("标准库"),a("OutboundLink")],1),s._v("，该库依赖操作系统的线程、文件或网络等功能。它还依赖于 C 标准库 "),a("code",[s._v("libc")]),s._v("，该库与 OS 服务紧密交互。因为计划是编写一个操作系统，所以我们不能使用任何依赖于 OS 的库。因此，我们必须通过 "),a("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/first-edition/using-rust-without-the-standard-library.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("no_std")]),s._v(" 属性"),a("OutboundLink")],1),s._v(" 禁用自动包含标准库。")]),s._v(" "),a("p",[s._v("我们首先创建一个新的 cargo 应用项目。 最简单的方法是通过命令行：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo new blog_os --bin --edition "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2018")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我将项目命名为 "),a("code",[s._v("blog_os")]),s._v("，但是您当然可以选择自己的名字。"),a("code",[s._v("--bin")]),s._v(" 标志指定我们要创建一个可执行二进制文件（而不是库），而 "),a("code",[s._v("--edition 2018")]),s._v(" 标志指定 crate 使用 "),a("a",{attrs:{href:"https://rust-lang-nursery.github.io/edition-guide/rust-2018/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("2018版"),a("OutboundLink")],1),s._v(" 的 Rust。运行命令后，cargo 为我们创建以下目录结构：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("blog_os\n├── Cargo.toml\n└── src\n    └── main.rs\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("在 "),a("code",[s._v("Cargo.toml")]),s._v(" 包含 crate 配置，例如 crate 名称，作者，"),a("a",{attrs:{href:"http://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("语义化版本"),a("OutboundLink")],1),s._v(" 号和依赖关系。"),a("code",[s._v("src/main.rs")]),s._v(" 文件包含 crate 的根模块和 "),a("code",[s._v("main")]),s._v(" 函数。您可以通过 "),a("code",[s._v("cargo build")]),s._v(" 来编译 crate，然后在 "),a("code",[s._v("target/debug")]),s._v(" 子文件夹中运行已编译的 "),a("code",[s._v("blog_os")]),s._v(" 二进制文件。")]),s._v(" "),a("h3",{attrs:{id:"no-std-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#no-std-属性"}},[s._v("#")]),s._v(" "),a("code",[s._v("no_std")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("现在的 crate 隐式链接了标准库。让我们尝试通过添加 "),a("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/first-edition/using-rust-without-the-standard-library.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("no_std")]),s._v(" 属性"),a("OutboundLink")],1),s._v(" 禁用此功能：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main.rs")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_std]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("尝试立即构建它（通过运行 "),a("code",[s._v("cargo build")]),s._v("）会触发以下错误：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: cannot "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" macro "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("println"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" this scope\n --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" src/main.rs:4:5\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     println"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     ^^^^^^^\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("错误原因是 "),a("a",{attrs:{href:"https://doc.rust-lang.org/std/macro.println.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("println")]),s._v("宏"),a("OutboundLink")],1),s._v(" 是我们不再包含的标准库的一部分。因此我们无法再打印东西。因为 "),a("code",[s._v("println")]),s._v(" 写入 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29",target:"_blank",rel:"noopener noreferrer"}},[s._v("标准输出"),a("OutboundLink")],1),s._v(" -- 操作系统提供的一个特殊文件描述符，所以错误是合理的。")]),s._v(" "),a("p",[s._v("因此，我们删除打印代码，然后使用空的 "),a("code",[s._v("main")]),s._v(" 函数重试：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main.rs")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_std]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo build\nerror: "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#[panic_handler]")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" required, but not found\nerror: language item required, but not found: "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("eh_personality"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("现在，编译器缺少 "),a("code",[s._v("#[panic_handler]")]),s._v(" 函数和一个 "),a("em",[s._v("语言项")]),s._v("（"),a("em",[s._v("language item")]),s._v("）。")]),s._v(" "),a("h2",{attrs:{id:"panic-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#panic-实现"}},[s._v("#")]),s._v(" Panic 实现")]),s._v(" "),a("p",[a("code",[s._v("panic_handler")]),s._v(" 属性定义了发生 "),a("a",{attrs:{href:"https://doc.rust-lang.org/stable/book/ch09-01-unrecoverable-errors-with-panic.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("panic"),a("OutboundLink")],1),s._v(" 时编译器应调用的函数。标准库提供了自己的 panic 处理函数，但是在 "),a("code",[s._v("no_std")]),s._v(" 环境中，我们需要自己定义它：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// in main.rs")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("panic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This function is called on panic.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[panic_handler]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("loop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/panic/struct.PanicInfo.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("PanicInfo")]),s._v(" 参数"),a("OutboundLink")],1),s._v(" 包含发生异常的文件和行以及可选的异常消息。该函数永远不应该返回，因此返回 "),a("a",{attrs:{href:"https://doc.rust-lang.org/nightly/std/primitive.never.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("“never” 类型"),a("OutboundLink")],1),s._v(" "),a("code",[s._v("!")]),s._v(" 将其标记为 "),a("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/first-edition/functions.html#diverging-functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("发散函数（diverging function）"),a("OutboundLink")],1),s._v("。 目前，此函数还不支持太多操作，所以我们只是执行无限循环。")]),s._v(" "),a("h2",{attrs:{id:"eh-personality-语言项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eh-personality-语言项"}},[s._v("#")]),s._v(" "),a("code",[s._v("eh_personality")]),s._v(" 语言项")]),s._v(" "),a("p",[s._v("语言项是编译器内部所需的特殊功能和类型。例如，"),a("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("Copy")]),s._v(" trait"),a("OutboundLink")],1),s._v(" 是一种语言项，它告诉编译器哪些类型具有 "),a("a",{attrs:{href:"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html",target:"_blank",rel:"noopener noreferrer"}},[a("em",[s._v("copy 语义")]),a("OutboundLink")],1),s._v("。查看其 "),a("a",{attrs:{href:"https://github.com/rust-lang/rust/blob/485397e49a02a3b7ff77c17e4a3f16c653925cb3/src/libcore/marker.rs#L296-L299",target:"_blank",rel:"noopener noreferrer"}},[s._v("实现"),a("OutboundLink")],1),s._v(" 可以看到它具有特殊的 "),a("code",[s._v('#[lang = "copy"]')]),s._v(" 属性，将其定义为语言项。")]),s._v(" "),a("p",[s._v("提供自己的语言项实现是可能的，但这只应该在逼不得已的情况下使用。原因是语言项是十分不稳定的实现细节，甚至没有类型检查（因此编译器甚至不检查函数是否具有正确的参数类型）。好在有更稳定的方法来修复上述语言项错误。")]),s._v(" "),a("p",[a("code",[s._v("eh_personality")]),s._v(" 语言项标记了用于实现 "),a("a",{attrs:{href:"http://www.bogotobogo.com/cplusplus/stackunwinding.php",target:"_blank",rel:"noopener noreferrer"}},[s._v("堆栈展开"),a("OutboundLink")],1),s._v(" 的功能。默认情况下，Rust 使用展开来运行所有活跃堆栈变量的析构函数，以防出现 "),a("a",{attrs:{href:"https://doc.rust-lang.org/stable/book/ch09-01-unrecoverable-errors-with-panic.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("panic"),a("OutboundLink")],1),s._v(" 情况。这样可以确保释放所有使用的内存，并允许父线程捕获 panic 并继续执行。但是，展开是一个复杂的过程，需要操作系统的某些特定库（例如，Linux 的 "),a("a",{attrs:{href:"http://www.nongnu.org/libunwind/",target:"_blank",rel:"noopener noreferrer"}},[s._v("libunwind"),a("OutboundLink")],1),s._v(" 或 Windows 的 "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680657(v=vs.85).aspx",target:"_blank",rel:"noopener noreferrer"}},[s._v("结构化异常处理"),a("OutboundLink")],1),s._v("），因此我们不想在我们的操作系统中使用它。")]),s._v(" "),a("h3",{attrs:{id:"禁用展开"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁用展开"}},[s._v("#")]),s._v(" 禁用展开")]),s._v(" "),a("p",[s._v("有些用例是不希望展开的，因此 Rust 提供了 "),a("a",{attrs:{href:"https://github.com/rust-lang/rust/pull/32900",target:"_blank",rel:"noopener noreferrer"}},[s._v("一旦 panic 就终止执行"),a("OutboundLink")],1),s._v(" 的选项。 这禁用了展开符号信息的生成，因此大大减小二进制大小。我们可以在多个地方禁用展开功能。最简单的方法是将以下几行添加到 "),a("code",[s._v("Cargo.toml")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-toml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("profile.dev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("panic")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abort"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("profile.release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("panic")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abort"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这会将 "),a("code",[s._v("dev")]),s._v(" 配置（用于 "),a("code",[s._v("cargo build")]),s._v(" ）和 "),a("code",[s._v("release")]),s._v(" 配置（用于"),a("code",[s._v("cargo build --release")]),s._v("）的 panic 策略设置为"),a("code",[s._v("abort")]),s._v("。 这样就不再需要 "),a("code",[s._v("eh_personality")]),s._v(" 语言项了。")]),s._v(" "),a("p",[s._v("以上两个错误现在修复了。但是现在尝试对其进行编译会触发另一个错误：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" cargo build\nerror: requires "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" lang_item\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们的程序缺少定义入口函数的 "),a("code",[s._v("start")]),s._v(" 语言项。")]),s._v(" "),a("h2",{attrs:{id:"start-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-属性"}},[s._v("#")]),s._v(" "),a("code",[s._v("start")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("我们可能会认为 "),a("code",[s._v("main")]),s._v(" 函数是运行程序时调用的第一个函数。但是，大多数语言都有一个 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Runtime_system",target:"_blank",rel:"noopener noreferrer"}},[s._v("运行时系统"),a("OutboundLink")],1),s._v("，它负责诸如垃圾回收（例如 Java）或软件线程（例如 Go 中的 goroutines）之类的事情。 这个运行时需要在 "),a("code",[s._v("main")]),s._v(" 之前调用，因为它需要初始化自己。")]),s._v(" "),a("p",[s._v("在链接标准库的典型 Rust 二进制文件中，执行从名为 "),a("code",[s._v("crt0")]),s._v("（“C 运行时零”）的 C 运行时库开始，该运行时库为 C 应用程序搭建环境。这包括创建堆栈并将参数放在正确的寄存器中。然后，C 运行时调用 "),a("a",{attrs:{href:"https://github.com/rust-lang/rust/blob/bb4d1491466d8239a7a5fd68bd605e3276e97afb/src/libstd/rt.rs#L32-L73",target:"_blank",rel:"noopener noreferrer"}},[s._v("Rust 运行时的入口函数"),a("OutboundLink")],1),s._v("，该入口由 "),a("code",[s._v("start")]),s._v(" 语言项标记。Rust 的运行时非常小，它可以处理一些小任务，例如设置堆栈溢出防护或在紧急情况下打印回溯信息。最后，运行时调用 "),a("code",[s._v("main")]),s._v(" 函数。")]),s._v(" "),a("p",[s._v("我们独立式的可执行文件无法访问 Rust 运行时和 "),a("code",[s._v("crt0")]),s._v("，因此，我们需要定义自己的程序入口。由于 "),a("code",[s._v("start")]),s._v(" 语言项依然需要 "),a("code",[s._v("crt0")]),s._v("，所以实现 "),a("code",[s._v("start")]),s._v(" 语言项起不了什么作用。我们直接覆写 "),a("code",[s._v("crt0")]),s._v(" 程序入口即可。")]),s._v(" "),a("h3",{attrs:{id:"覆写程序入口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆写程序入口"}},[s._v("#")]),s._v(" 覆写程序入口")]),s._v(" "),a("p",[s._v("添加 "),a("code",[s._v("#![no_main]")]),s._v(" 属性来告诉 Rust 编译器我们不想使用常规的程序入口调用链。")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_std]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_main]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("panic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This function is called on panic.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[panic_handler]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("loop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("细心一看会发现我们移除了 "),a("code",[s._v("main")]),s._v(" 函数，因为没了底层运行时的调用，"),a("code",[s._v("main")]),s._v(" 已经没有什么意义了。现在，我们准备用自定义的 "),a("code",[s._v("_start")]),s._v(" 函数重写操作系统的入口。")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[no_mangle]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("_start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("loop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("我们使用 "),a("code",[s._v("#[no_mangle]")]),s._v(" 属性禁用 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Name_mangling",target:"_blank",rel:"noopener noreferrer"}},[s._v("命名改写（name mangling）"),a("OutboundLink")],1),s._v(" 使得 Rust 编译器会如实地产出一个名为 "),a("code",[s._v("_start")]),s._v(" 的函数。少了这个属性的话，编译器会生成形如 "),a("code",[s._v("_ZN3blog_os4_start7hb173fedf945531caE")]),s._v(" 的晦涩符号作为分配给每个函数的唯一名字。因为下一步我们需要把入口函数的名称告诉链接器，所以这个属性是必须的。")]),s._v(" "),a("p",[s._v("我们还必须标识函数为 "),a("code",[s._v('extern "C"')]),s._v("，告诉编译器采用此函数的 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Calling_convention",target:"_blank",rel:"noopener noreferrer"}},[s._v("C 语言调用形式"),a("OutboundLink")],1),s._v("（而不是不明确的 Rust 调用形式）。将这个函数命名为 "),a("code",[s._v("_start")]),s._v(" 是因为这是大部分系统默认的程序入口名称。")]),s._v(" "),a("p",[a("code",[s._v("!")]),s._v(" 返回类型表明这个函数是发散的，即绝对不允许返回。因为程序入口不会被任何函数调用，而是由操作系统或引导加载器（bootloader）直接调用的，所以使函数发散是必须的。因此，入口点不直接返回，而应该调用操作系统的 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Exit_(system_call)",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("exit")]),s._v(" 系统调用"),a("OutboundLink")],1),s._v("。在当前场景下，独立式的二进制返回后没有其他事需要做的了，因此关闭机器是个合理选择。我们暂且借助死循环来实现这个使函数发散的要求。")]),s._v(" "),a("p",[s._v("再次运行 "),a("code",[s._v("cargo build")]),s._v(" 会触发难看的 "),a("em",[s._v("链接器")]),s._v(" 错误。")]),s._v(" "),a("h2",{attrs:{id:"链接器错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接器错误"}},[s._v("#")]),s._v(" 链接器错误")]),s._v(" "),a("p",[s._v("链接器是一个将生成的代码打包成可执行文件的程序。由于可执行文件的格式因 Linux、Windows 和 macOS 而异，每个系统都有自己的链接器，这些链接器跑出的异常也是不同的。这些错误的根本原因是一样的：链接器的默认配置假定我们的程序依赖于 C 语言运行时，然后程序并没有。")]),s._v(" "),a("p",[s._v("为了解决这个错误，我们需要告诉链接器它不应该包含 C 语言运行时。我们的实现方式可以是给链接器传递特定的参数，或者是基于某个“裸机”目标构建程序。")]),s._v(" "),a("h3",{attrs:{id:"基于某个-裸机-目标构建程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于某个-裸机-目标构建程序"}},[s._v("#")]),s._v(" 基于某个“裸机”目标构建程序")]),s._v(" "),a("p",[s._v("默认情况下，Rust 会尝试构建能够在我们当前系统环境运行的二进制。例如，如果我们使用的 "),a("code",[s._v("x86_64")]),s._v(" 上面的 Windows，Rust 会试图基于 "),a("code",[s._v("x86_64")]),s._v(" 指令集构建一个 "),a("code",[s._v(".exe")]),s._v(" Windows 可执行文件。这个环境叫做我们的“主机”系统。")]),s._v(" "),a("p",[s._v("Rust 采用一种称为 "),a("em",[a("a",{attrs:{href:"https://clang.llvm.org/docs/CrossCompilation.html#target-triple",target:"_blank",rel:"noopener noreferrer"}},[s._v("目标三元组（target triple）"),a("OutboundLink")],1)]),s._v(" 的字符串描述不同的环境。我们执行命令 "),a("code",[s._v("rustc --version --verbose")]),s._v(" 可以查看自己主机系统的目标三元组。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("rustc "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.35")]),s._v(".0-nightly "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("474e7a648 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v("-04-07"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nbinary: rustc\ncommit-hash: 474e7a6486758ea6fc761893b1a49cd9076fb0ab\ncommit-date: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v("-04-07\nhost: x86_64-unknown-linux-gnu\nrelease: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.35")]),s._v(".0-nightly\nLLVM version: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上述输出源自一个 "),a("code",[s._v("x86_64")]),s._v(" 的 Linux 系统。可见，"),a("code",[s._v("host")]),s._v(" 三元组是 "),a("code",[s._v("x86_64-unknown-linux-gnu")]),s._v("，其中包含了 CPU 架构（"),a("code",[s._v("x86_64")]),s._v("）、厂商（"),a("code",[s._v("unknown")]),s._v("）、操作系统（"),a("code",[s._v("linux")]),s._v("）和 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Application_binary_interface",target:"_blank",rel:"noopener noreferrer"}},[s._v("ABI"),a("OutboundLink")],1),s._v(" ("),a("code",[s._v("gnu")]),s._v(")。")]),s._v(" "),a("p",[s._v("基于我们的主机三元组编译，Rust 编译器和链接器假设底层有一个诸如 Linux 或 Windows 的、默认使用 C 语言运行时的操作系统，正是这点触发了链接器错误。因此，为了解决链接错误，我们可以基于没有底层操作系统的其他环境进行编译。")]),s._v(" "),a("p",[a("code",[s._v("thumbv7em-none-eabihf")]),s._v(" 目标三元组就是这种类型的裸机环境实例之一，描述了一个 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Embedded_system",target:"_blank",rel:"noopener noreferrer"}},[s._v("嵌入式"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/ARM_architecture",target:"_blank",rel:"noopener noreferrer"}},[s._v("ARM"),a("OutboundLink")],1),s._v(" 系统。具体细节不重要，真正有用的是目标三元组里面的 "),a("code",[s._v("none")]),s._v(" 表明其没有底层操作系统。为了能够基于这个目标进行编译，我们在 rustup 里面添加它：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("rustup target "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" thumbv7em-none-eabihf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上述命令会下载适配这个系统的标准（和核心）库。现在我们就可以开始基于这个目标构建独立的可执行文件了：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo build --target thumbv7em-none-eabihf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("通过传入 "),a("code",[s._v("--target")]),s._v(" 参数，我们把二进制 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cross_compiler",target:"_blank",rel:"noopener noreferrer"}},[s._v("交叉编译"),a("OutboundLink")],1),s._v(" 到一个裸机目标系统。因为目标系统没有操作系统，链接器不会尝试链接 C 语言运行时，构建成功，没有任何链接器错误。")]),s._v(" "),a("p",[s._v("这正是我们用来构建 OS 内核的方式。我们将会利用一个 "),a("a",{attrs:{href:"https://doc.rust-lang.org/rustc/targets/custom.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("自定义目标"),a("OutboundLink")],1),s._v(" 来描述一个 "),a("code",[s._v("x86_64")]),s._v(" 裸机环境。具体细节在下一篇文章分解。")]),s._v(" "),a("h3",{attrs:{id:"链接器参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接器参数"}},[s._v("#")]),s._v(" 链接器参数")]),s._v(" "),a("p",[s._v("除了基于某个裸机系统进行编译，给链接器传递特定参数也是能够解决链接器错误的。我们的内核不会采用这种方式，因此，可选的本节为了完整性而提供的。点击以下*“链接器参数”*显示可选的内容。")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("链接器参数")]),s._v(" "),a("p",[s._v("本节，我们讨论出现在 Linux、Windows 和 macOS 的链接器错误，并解释如何通过传入额外的参数给链接器解决他们。值得注意的是，二进制的格式和链接器因操作系统而异，因此，每种操作系统所需的实参是不同的。")]),s._v(" "),a("h4",{attrs:{id:"linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[s._v("#")]),s._v(" Linux")]),s._v(" "),a("p",[s._v("在 Linux 上，可以看到的链接器错误如下（简略版）：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: /usr/lib/gcc/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/x86_64-linux-gnu/Scrt1.o: In "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("_start':\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".text+0x12"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": undefined reference to "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("__libc_csu_fini"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\n          /usr/lib/gcc/../x86_64-linux-gnu/Scrt1.o: In function "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("_start':\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".text+0x19"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": undefined reference to "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("__libc_csu_init'")]),s._v("\n          /usr/lib/gcc/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/x86_64-linux-gnu/Scrt1.o: In "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("_start':\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".text+0x25"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": undefined reference to "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("__libc_start_main'\n          collect2: error: ld returned "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" status\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("问题出在链接器默认包含了 C 语言运行时的启动例程（也被称为 "),a("code",[s._v("_start")]),s._v("）。这个例程依赖 C 标准库 "),a("code",[s._v("libc")]),s._v(" 的某些符号，而这些符号由于 "),a("code",[s._v("no_std")]),s._v(" 属性没有被包含进来，因此，链接器无法找到这些引用。为了解决这个问题，我们可以通过传入 "),a("code",[s._v("_nostartfiles")]),s._v(" 标识符来告诉链接器不要链接 C 启动例程。")]),s._v(" "),a("p",[s._v("借助 cargo 传递链接器属性的一种方式是 "),a("code",[s._v("cargo rustc")]),s._v(" 命令。这个命令和 "),a("code",[s._v("cargo build")]),s._v(" 命令的效果几乎一致，但是还允许我们往底层的 Rust 编译器 "),a("code",[s._v("rustc")]),s._v(" 传递选项。"),a("code",[s._v("rustc")]),s._v(" 支持 "),a("code",[s._v("-C link-arg")]),s._v(" 标识符传递参数给链接器。综上，新命令如下：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-arg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("-nostartfiles\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("至此，我们的 crate 就能构建为 Linux 上的一个独立式的二进制文件了。")]),s._v(" "),a("p",[s._v("因为链接器默认会查找名为 "),a("code",[s._v("_start")]),s._v(" 的函数作为入口函数，我们不需要显示地说明入口函数。")]),s._v(" "),a("h4",{attrs:{id:"windows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[s._v("#")]),s._v(" Windows")]),s._v(" "),a("p",[s._v("Windows 出现不同的链接器错误（已精简）如下：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("link.exe"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1561")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C:'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("Program Files (x86)"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('link.exe"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: LINK "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" fatal error LNK1561: entry point must be defined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("错误 “entry point must be defined” 意味着链接器无法找到程序入口。Windows 的默认入口函数名 "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/cpp/build/reference/entry-entry-point-symbol",target:"_blank",rel:"noopener noreferrer"}},[s._v("依赖于具体使用的子系统"),a("OutboundLink")],1),s._v("。对于 "),a("code",[s._v("CONSOLE")]),s._v(" 子系统，链接查找名为 "),a("code",[s._v("mainCRTStartup")]),s._v(" 的函数，而对于 "),a("code",[s._v("WINDOWS")]),s._v(" 子系统，它会查找名为 "),a("code",[s._v("WinMainCRTStartup")]),s._v(" 的函数。为了覆写默认值，并告诉链接器去使用我们的 "),a("code",[s._v("_start")]),s._v(" 函数，我们给链接器传递 "),a("code",[s._v("/ENTRY")]),s._v(" 参数：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-arg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/ENTRY:_start\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由不同的参数格式可见，Windows 的链接器和 Linux 的链接器是完全不同的程序。")]),s._v(" "),a("p",[s._v("至此，触发的链接器错误变为：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("link.exe"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1221")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C:'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("Program Files (x86)"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('link.exe"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: LINK "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" fatal error LNK1221: a subsystem can't be inferred and must be\n          defined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("错误原因是 Windows 二进制可以使用不同的 "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/cpp/build/reference/entry-entry-point-symbol",target:"_blank",rel:"noopener noreferrer"}},[s._v("子系统"),a("OutboundLink")],1),s._v("。对于常规程序，子系统可以通过入口函数的名字推断：如果入口名为 "),a("code",[s._v("main")]),s._v("，使用的是 "),a("code",[s._v("CONSOLE")]),s._v(" 子系统；如果入口名为 "),a("code",[s._v("WinMain")]),s._v("，使用的是 "),a("code",[s._v("WINDOWS")]),s._v(" 子系统。由于我们的 "),a("code",[s._v("_start")]),s._v(" 函数的名称和以上均不同，因此，我们需要明确标明使用的子系统：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/ENTRY:_start /SUBSYSTEM:console"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("我们这里使用的是 "),a("code",[s._v("CONSOLE")]),s._v(" 子系统，但是 "),a("code",[s._v("WINDOWS")]),s._v(" 子系统也是同样适用的。除了多次使用 "),a("code",[s._v("-C link-arg")]),s._v("，我们还可以使用 "),a("code",[s._v("-C link-args")]),s._v(" 的方式，其中 "),a("code",[s._v("link-args")]),s._v(" 是一个空格分割的参数列表。")]),s._v(" "),a("p",[s._v("执行这个命令，我们的二进制应该能够在 Windows 上正常编译了。")]),s._v(" "),a("h4",{attrs:{id:"macos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[s._v("#")]),s._v(" macOS")]),s._v(" "),a("p",[s._v("macOS 上出现的链接器错误（已精简）如下")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: ld: entry point "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" undefined. "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" architecture x86_64\n          clang: error: linker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" failed with "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("错误信息告诉我们链接器没能找到默认名为 "),a("code",[s._v("main")]),s._v(" 的入口函数（由于某些原因， macOS 下的所有函数都会有 "),a("code",[s._v("_")]),s._v(" 前缀）。为了把入口函数设置为我们的 "),a("code",[s._v("_start")]),s._v(" 函数，我们需要传入链接器参数 "),a("code",[s._v("-e")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-e __start"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("-e")]),s._v(" 标识符注明入口函数的名字。因为 macOS 的所有函数都有一个额外的 "),a("code",[s._v("_")]),s._v(" 前缀，我们需要设置入口函数为 "),a("code",[s._v("__start")]),s._v(" 而不是 "),a("code",[s._v("_start")]),s._v("。")]),s._v(" "),a("p",[s._v("至此，链接器链接器错误变为：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: ld: dynamic main executables must "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("link")]),s._v(" with libSystem.dylib\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" architecture x86_64\n          clang: error: linker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" failed with "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("macOS "),a("a",{attrs:{href:"https://developer.apple.com/library/content/qa/qa1118/_index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方没有支持静态链接库"),a("OutboundLink")],1),s._v("，且默认要求程序链接 "),a("code",[s._v("libSystem")]),s._v(" 库。为了规避这个限制，连接一个静态二进制，我们往链接器传入 "),a("code",[s._v("-static")]),s._v(" 标识符：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-e __start -static"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是这还是不够的，链接器错误变为：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("error: linking with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("cc"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" failed: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cc"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" note: ld: library not found "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" -lcrt0.o\n          clang: error: linker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" failed with "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这个错误的触发是因为 macOS 程序默认链接 "),a("code",[s._v("crt0")]),s._v(" (“C 语言运行时 0”)。这和我们在 Linux 上看到的错误类似，同理可通过添加 "),a("code",[s._v("-nostartfiles")]),s._v(" 链接器参数解决：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-e __start -static -nostartfiles"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("现在，我们的程序应该能在 macOS 上成功构建了。")]),s._v(" "),a("h4",{attrs:{id:"统一构建命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一构建命令"}},[s._v("#")]),s._v(" 统一构建命令")]),s._v(" "),a("p",[s._v("现在对于不同的主机系统需要执行不同的构建命令，这是不优雅的。为了避免这个问题，我们可以创建一个名为 "),a("code",[s._v(".cargo/config")]),s._v(" 的文件用于注明平台专用的参数：")]),s._v(" "),a("div",{staticClass:"language-toml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in .cargo/config")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("target.'cfg(target_os = \"linux\")'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("rustflags")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link-arg=-nostartfiles"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("target.'cfg(target_os = \"windows\")'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("rustflags")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link-args=/ENTRY:_start /SUBSYSTEM:console"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("target.'cfg(target_os = \"macos\")'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("rustflags")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link-args=-e __start -static -nostartfiles"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("rustflags")]),s._v(" 键包含会在每次调用时自动添加给 "),a("code",[s._v("rustc")]),s._v(" 的参数。想要了解更多 "),a("code",[s._v(".cargo/config")]),s._v(" 的信息的话，请移步 "),a("a",{attrs:{href:"https://doc.rust-lang.org/cargo/reference/config.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("现在我们的程序在三个平台上都可以简单地通过 "),a("code",[s._v("cargo build")]),s._v(" 命令构建了。")]),s._v(" "),a("h4",{attrs:{id:"我们应该这样做吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们应该这样做吗"}},[s._v("#")]),s._v(" 我们应该这样做吗？")]),s._v(" "),a("p",[s._v("虽然我们可以为 Linux、Windows 和 macOS 编译独立式的二进制，但是这不是一个好主意。理由是我们的二进制会期望不少事情，例如，栈在 "),a("code",[s._v("_start")]),s._v(" 函数调用时被初始化。缺乏 C 语言运行时的话，这些要求可能无法满足，进而使得程序崩溃，触发诸如 segmentation fault 等错误。")]),s._v(" "),a("p",[s._v("如果你想要在现有的操作系统上创建一个包含 "),a("code",[s._v("libc")]),s._v(" 的最小化二进制，遵循 "),a("a",{attrs:{href:"https://doc.rust-lang.org/1.16.0/book/no-stdlib.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),a("OutboundLink")],1),s._v(" 的描述设置 "),a("code",[s._v("#[start]")]),s._v(" 属性可能是一个更好的方法。")])]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("一个最小化的独立式 Rust 二进制看起来是这样的：")]),s._v(" "),a("p",[a("code",[s._v("src/main.rs")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_std]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// don't link the Rust standard library")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#![no_main]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// disable all Rust-level entry points")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("panic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[no_mangle]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// don't mangle the name of this function")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("_start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this function is the entry point, since the linker looks for a function")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// named `_start` by default")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("loop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This function is called on panic.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[s._v("#[panic_handler]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("panic")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PanicInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("loop")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("code",[s._v("Cargo.toml")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-toml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-toml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("package")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"crate_name"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("version")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.1.0"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("authors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Author Name <author@example.com>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the profile used for `cargo build`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("profile.dev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("panic")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abort"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# disable stack unwinding on panic")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the profile used for `cargo build --release`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("profile.release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key property"}},[s._v("panic")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abort"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# disable stack unwinding on panic")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("为了构建这个二进制，我们需要基于一个诸如 "),a("code",[s._v("thumbv7em-none-eabihf")]),s._v(" 裸机目标进行编译。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cargo build --target thumbv7em-none-eabihf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("或者，我们可以通过传入额外的链接器参数基于主机系统进行编译：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Linux")]),s._v("\ncargo rustc -- -C link-arg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("-nostartfiles\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Windows")]),s._v("\ncargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/ENTRY:_start /SUBSYSTEM:console"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# macOS")]),s._v("\ncargo rustc -- -C link-args"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-e __start -static -nostartfiles"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("不要忘了这只是一个最小化的独立式 Rust 二进制样例而已。这个二进制期望很多事情，例如 "),a("code",[s._v("_start")]),s._v(" 函数调用时栈空间被初始化。"),a("strong",[s._v("因此，为了实际使用这个二进制，还需要更多步骤")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"下篇预告"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下篇预告"}},[s._v("#")]),s._v(" 下篇预告？")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/_post/blog-os-01-freestanding-rust-binary/@/second-edition/posts/02-minimal-rust-kernel/"}},[s._v("下一篇文章")]),s._v(" 会讲解把我们的独立式二进制转化为一个最小化操作系统内核的过程。内容包括创建一个自定义的目标，组合我们的二进制和引导加载器，还有学习往屏幕打印东西。")],1)])}),[],!1,null,null,null);t.default=e.exports}}]);