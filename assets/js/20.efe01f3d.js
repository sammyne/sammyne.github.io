(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{509:function(t,s,a){t.exports=a.p+"assets/img/function-stack-frame.6dc270e7.svg"},510:function(t,s,a){t.exports=a.p+"assets/img/exception-stack-frame.af89a1e5.svg"},511:function(t,s,a){t.exports=a.p+"assets/img/qemu-breakpoint-exception.7bb4470a.png"},636:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("原文："),n("a",{attrs:{href:"https://os.phil-opp.com/cpu-exceptions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU Exceptions"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("CPU 异常会在多种出错情况下出现，例如访问非法内存地址或者除 0。为了处理这些异常，我们需要设置好提供处理函数的 "),n("em",[t._v("中断描述符表")]),t._v("。本文结束之后，我们的内核应该能够捕获 "),n("a",{attrs:{href:"https://wiki.osdev.org/Exceptions#Breakpoint",target:"_blank",rel:"noopener noreferrer"}},[t._v("断点异常"),n("OutboundLink")],1),t._v("，并恢复继续执行。")]),t._v(" "),n("p",[t._v("此博客在 "),n("a",{attrs:{href:"https://github.com/phil-opp/blog_os",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),n("OutboundLink")],1),t._v(" 上公开开发。如果您有任何问题或疑问，请在此处打开一个问题。 您也可以在 "),n("a",{attrs:{href:"#valine"}},[t._v("底部")]),t._v(" 发表评论。这篇文章的完整源代码可以在 "),n("a",{attrs:{href:"https://github.com/sammyne/blog-os-cn/tree/master/05-cpu-exceptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("blog-os-cn/05-cpu-exceptions"),n("OutboundLink")],1),t._v(" 找到。")]),t._v(" "),n("h2",{attrs:{id:"概览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),n("p",[t._v("异常说明当前指令工作不正常。例如，CPU 会在当前指令试图除零时抛出一个异常。异常出现后，CPU 中断手头工作，根据异常类型立即调用特定的异常处理函数。")]),t._v(" "),n("p",[t._v("x86 架构大约有 20 种不同类型的 CPU 异常。其中最重要的是：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("缺页异常")]),t._v("：非法内存访问会触发缺页异常。例如，当前指令试图读取没有映射的页或者写入只读页面")]),t._v(" "),n("li",[n("strong",[t._v("非法操作码")]),t._v("：当前指令异常会触发这个异常，例如在不支持 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSE 指令"),n("OutboundLink")],1),t._v(" 的旧版 CPU 使用这些指令")]),t._v(" "),n("li",[n("strong",[t._v("通用保护异常")]),t._v("：这是诱因最多的异常类型，会在多种非法访问时触发，例如用户代码试图执行特权指令或者往配置寄存器的预留字段写入")]),t._v(" "),n("li",[n("strong",[t._v("二级异常")]),t._v("：异常触发时，CPU 会尝试调用相应的处理函数。如果 "),n("em",[t._v("在调用这个异常处理函数")]),t._v(" 过程中又触发了异常，CPU 会抛出二级异常。触发的异常没有相应的处理函数时也会抛出这个异常")]),t._v(" "),n("li",[n("strong",[t._v("三级异常")]),t._v("：如果 "),n("em",[t._v("在调用二级异常处理函数")]),t._v(" 过程中又触发了异常，CPU 会抛出严重的 "),n("em",[t._v("三级异常")]),t._v("。我们无法捕获或处理三级异常。大多数处理器的处理方式为重置或重启操作系统")])]),t._v(" "),n("p",[t._v("完整的异常列表参见 "),n("a",{attrs:{href:"https://wiki.osdev.org/Exceptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("OSDev wiki"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"中断描述符表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中断描述符表"}},[t._v("#")]),t._v(" 中断描述符表")]),t._v(" "),n("p",[t._v("为了捕获和处理异常，我们需要配置一个称为 "),n("em",[t._v("中断描述符表")]),t._v("（IDT）的结构。我们在表里面设定每种 CPU 异常的处理函数。硬件会直接使用这个表，所以要求我们遵循预定义格式。每个表项必须符合以下 16 字节的结构：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("名称")]),t._v(" "),n("th",[t._v("含义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("u16")]),t._v(" "),n("td",[t._v("函数指针 [0:15]")]),t._v(" "),n("td",[t._v("处理函数指针的低位")])]),t._v(" "),n("tr",[n("td",[t._v("u16")]),t._v(" "),n("td",[t._v("GDT 选择器")]),t._v(" "),n("td",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Global_Descriptor_Table",target:"_blank",rel:"noopener noreferrer"}},[t._v("全局描述符表"),n("OutboundLink")],1),t._v(" 代码段的选择符")])]),t._v(" "),n("tr",[n("td",[t._v("u16")]),t._v(" "),n("td",[t._v("选项")]),t._v(" "),n("td",[t._v("往下看")])]),t._v(" "),n("tr",[n("td",[t._v("u16")]),t._v(" "),n("td",[t._v("函数指针 [16:31]")]),t._v(" "),n("td",[t._v("处理函数指针的中位")])]),t._v(" "),n("tr",[n("td",[t._v("u32")]),t._v(" "),n("td",[t._v("函数指针 [32:63]")]),t._v(" "),n("td",[t._v("处理函数指针的高位")])]),t._v(" "),n("tr",[n("td",[t._v("u32")]),t._v(" "),n("td",[t._v("预留")]),t._v(" "),n("td")])])]),t._v(" "),n("p",[t._v("选项字段的格式如下：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("位")]),t._v(" "),n("th",[t._v("名称")]),t._v(" "),n("th",[t._v("含义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("0-2")]),t._v(" "),n("td",[t._v("中断栈表索引")]),t._v(" "),n("td",[t._v("0：不要切换栈 ，1-7：这个处理函数调用时切换到栈表的第 n 个栈")])]),t._v(" "),n("tr",[n("td",[t._v("3-7")]),t._v(" "),n("td",[t._v("预留")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("8")]),t._v(" "),n("td",[t._v("0：中断门，1：陷入门")]),t._v(" "),n("td",[t._v("这位为 0 时，处理函数调用时禁止中断")])]),t._v(" "),n("tr",[n("td",[t._v("9-11")]),t._v(" "),n("td",[t._v("必须为 0")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("12")]),t._v(" "),n("td",[t._v("必须为 0")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("13-14")]),t._v(" "),n("td",[t._v("描述符特权级别（DPL）")]),t._v(" "),n("td",[t._v("调用这个处理函数所需的最小特权级别")])]),t._v(" "),n("tr",[n("td",[t._v("15")]),t._v(" "),n("td",[t._v("存在")]),t._v(" "),n("td")])])]),t._v(" "),n("p",[t._v("每种异常都有预定义的 IDT 索引。例如，非法操作码异常表项索引为 6，缺页异常表项索引为 14。因此，硬件可以为每种异常自动加载对应的 IDT 表项。OSDev wiki 的 "),n("a",{attrs:{href:"https://wiki.osdev.org/Exceptions",target:"_blank",rel:"noopener noreferrer"}},[t._v("异常表"),n("OutboundLink")],1),t._v(" 在 “Vector nr.” 列展示了所有异常的索引。")]),t._v(" "),n("p",[t._v("异常触发时，CPU 大致会执行以下操作：")]),t._v(" "),n("ol",[n("li",[t._v("将某些寄存器入栈，包括指令指针和 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/FLAGS_register",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFLAGS"),n("OutboundLink")],1),t._v(" 寄存器（我们会在本文的后续部分用到）")]),t._v(" "),n("li",[t._v("从 IDT 读取对应的表项。例如，缺页异常时 CPU 会读取第 14 个表项")]),t._v(" "),n("li",[t._v("检查表项是否存在。如果不存在则抛出二级异常")]),t._v(" "),n("li",[t._v("如果表项对应一个中断门（第 40 位没有设置），禁用硬件中断")]),t._v(" "),n("li",[t._v("加载特定的 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Global_Descriptor_Table",target:"_blank",rel:"noopener noreferrer"}},[t._v("GDT"),n("OutboundLink")],1),t._v(" 选择器到 CS 段")]),t._v(" "),n("li",[t._v("跳转到指定的处理函数")])]),t._v(" "),n("p",[t._v("暂且不用纠结第 4 和第 5 步，我们会在后续文章学到全局描述符表和硬件中断的知识。")]),t._v(" "),n("h2",{attrs:{id:"idt-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#idt-类型"}},[t._v("#")]),t._v(" IDT 类型")]),t._v(" "),n("p",[t._v("与其创建自己的 IDT 类型，我们直接使用 "),n("code",[t._v("x86_64")]),t._v(" 包的 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptDescriptorTable.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("InterruptDescriptorTable")]),t._v(" 结构体"),n("OutboundLink")],1),t._v("，形式如下：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[repr(C)]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("InterruptDescriptorTable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" divide_by_zero"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" debug"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" non_maskable_interrupt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" overflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" bound_range_exceeded"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" invalid_opcode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" device_not_available"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" double_fault"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" invalid_tss"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" segment_not_present"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" stack_segment_fault"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" general_protection_fault"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" page_fault"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PageFaultHandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" x87_floating_point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" alignment_check"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" machine_check"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" simd_floating_point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" virtualization"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" security_exception"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFuncWithErrCode")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// some fields omitted")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])]),n("p",[t._v("字段类型为 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.Entry.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("idt::Entry<F>")]),n("OutboundLink")],1),t._v("，是一个代表 IDT 表项字段的结构体（如上表）。类型参数 "),n("code",[t._v("F")]),t._v(" 定义预期的处理函数类型，可以看到，有些表项需要 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.HandlerFunc.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("HandlerFunc")]),n("OutboundLink")],1),t._v("，另一些则需要 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.HandlerFuncWithErrCode.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("HandlerFuncWithErrCode")]),n("OutboundLink")],1),t._v("。缺页异常甚至有专用的 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.PageFaultHandlerFunc.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("PageFaultHandlerFunc")]),n("OutboundLink")],1),t._v(" 类型。")]),t._v(" "),n("p",[t._v("我们先看看 "),n("code",[t._v("HandlerFunc")]),t._v(" 类型：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HandlerFunc")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x86-interrupt"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptStackFrame")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("它是 "),n("code",[t._v('extern "x86-interrupt" fn')]),t._v(" 类型的 "),n("a",{attrs:{href:"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases",target:"_blank",rel:"noopener noreferrer"}},[t._v("别名"),n("OutboundLink")],1),t._v("。"),n("code",[t._v("extern")]),t._v(" 关键字定义这个函数使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/nomicon/ffi.html#foreign-calling-conventions",target:"_blank",rel:"noopener noreferrer"}},[t._v("外部调用风格"),n("OutboundLink")],1),t._v("，通常用于和 C 代码交互（"),n("code",[t._v('extern "C" fn')]),t._v("）。这个 "),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格又是什么鬼？")]),t._v(" "),n("h2",{attrs:{id:"中断调用风格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中断调用风格"}},[t._v("#")]),t._v(" 中断调用风格")]),t._v(" "),n("p",[t._v("异常处理和函数调用非常类似：CPU 跳转到被调函数的第一个指令，然后执行它。完成后，CPU 跳转到返回地址，继续执行父函数。")]),t._v(" "),n("p",[t._v("然而，异常和函数调用的一个主要区别是：函数调用由编译器插入 "),n("code",[t._v("call")]),t._v(" 指令自愿调用，而异常则在 "),n("em",[t._v("任何")]),t._v(" 指令执行时都可能触发。为了理解这种区别的后果，我们需要更加深入地了解一下函数调用。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Calling_convention",target:"_blank",rel:"noopener noreferrer"}},[t._v("调用风格"),n("OutboundLink")],1),t._v(" 规定函数调用的细节。例如，它们规定函数参数的存放位置（例如，寄存器或栈），以及结果如何存储。在 x86_64 Linux 上，C 函数会采用以下调用风格（在 "),n("a",{attrs:{href:"https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("System V ABI"),n("OutboundLink")],1),t._v(" 有说明）")]),t._v(" "),n("ul",[n("li",[t._v("前 6 个整数参数传入寄存器 "),n("code",[t._v("rdi")]),t._v("、"),n("code",[t._v("rsi")]),t._v("、"),n("code",[t._v("rdx")]),t._v("、"),n("code",[t._v("rcx")]),t._v("、"),n("code",[t._v("r8")]),t._v(" 和 "),n("code",[t._v("r9")])]),t._v(" "),n("li",[t._v("额外参数传到栈上")]),t._v(" "),n("li",[t._v("结果返回到 "),n("code",[t._v("rax")]),t._v(" 和 "),n("code",[t._v("rdx")])])]),t._v(" "),n("p",[t._v("需要注意的是 Rust 没有遵循 C ABI（事实上，"),n("a",{attrs:{href:"https://github.com/rust-lang/rfcs/issues/600",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust 目前甚至没有 ABI"),n("OutboundLink")],1),t._v("），所以上述规则只适用于声明为 "),n("code",[t._v('extern "C" fn')]),t._v(" 的函数。")]),t._v(" "),n("h3",{attrs:{id:"保留和暂存寄存器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保留和暂存寄存器"}},[t._v("#")]),t._v(" 保留和暂存寄存器")]),t._v(" "),n("p",[t._v("调用风格将寄存器分为两类："),n("em",[t._v("保留")]),t._v(" 和 "),n("em",[t._v("暂存")]),t._v(" 寄存器。")]),t._v(" "),n("p",[n("em",[t._v("保留")]),t._v(" 寄存器在函数调用间必须保持不变，所以被调函数（"),n("em",[t._v("callee")]),t._v("）只允许在返回前还原它们原始值的情况下覆写这些寄存器。因此，这些寄存器被称为 “callee-saved”。常见模式为在函数开头将这些寄存器保存到栈上，然后在函数返回前还原它们。")]),t._v(" "),n("p",[t._v("相反，被调函数可以不受限制地覆写 "),n("em",[t._v("暂存")]),t._v(" 寄存器。调用者如果想要跨函数调用过程保留暂存寄存器的值，需要备份并在函数调用前还原它们的值（例如，把他们压入栈）。所以暂存寄存器被 "),n("em",[t._v("调用者负责保存的（caller-saved）")]),t._v("。")]),t._v(" "),n("p",[t._v("在 x86_64 架构下，C 调用风格规定以下保留和暂存寄存器：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("保留寄存器")]),t._v(" "),n("th",[t._v("暂存寄存器")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("rbp")]),t._v(", "),n("code",[t._v("rbx")]),t._v(", "),n("code",[t._v("rsp")]),t._v(", "),n("code",[t._v("r12")]),t._v(", "),n("code",[t._v("r13")]),t._v(", "),n("code",[t._v("r14")]),t._v(", "),n("code",[t._v("r15")])]),t._v(" "),n("td",[n("code",[t._v("rax")]),t._v(", "),n("code",[t._v("rcx")]),t._v(", "),n("code",[t._v("rdx")]),t._v(", "),n("code",[t._v("rsi")]),t._v(", "),n("code",[t._v("rdi")]),t._v(", "),n("code",[t._v("r8")]),t._v(", "),n("code",[t._v("r9")]),t._v(", "),n("code",[t._v("r10")]),t._v(", "),n("code",[t._v("r11")])])]),t._v(" "),n("tr",[n("td",[n("em",[t._v("callee-saved")])]),t._v(" "),n("td",[n("em",[t._v("caller-saved")])])])])]),t._v(" "),n("p",[t._v("编译器知晓这些规则，所以它会生成相应的代码。例如，大部分函数都会以 "),n("code",[t._v("push rbp")]),t._v(" 开始，把 "),n("code",[t._v("rbp")]),t._v(" 备份到栈上（因为这是个 callee-saved 寄存器）。")]),t._v(" "),n("h3",{attrs:{id:"保留所有寄存器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#保留所有寄存器"}},[t._v("#")]),t._v(" 保留所有寄存器")]),t._v(" "),n("p",[t._v("和函数调用不同，异常在 "),n("em",[t._v("任何")]),t._v(" 指令执行时都有可能发生。大部分情况下，我们在编译时甚至不知道产出的代码是否会触发异常。例如，编译器不知道一个指令是否会触发栈溢出或缺页异常。")]),t._v(" "),n("p",[t._v("由于不知道异常的发生时间，我们无法在这之前备份。这意味着异常处理函数无法使用依赖 caller-saved 寄存器的调用风格。我们需要的是一个会保留 "),n("em",[t._v("所有寄存器")]),t._v(" 的调用风格。"),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格正是我们所需，它保证函数返回时所有寄存器都会还原到它们的原始值。")]),t._v(" "),n("p",[t._v("需要注意的是不是说所有寄存器都会在进入函数时保存到栈上。而是编译器只会备份被函数覆写过的寄存器。这样一来，只用少量寄存器的函数就会产出非常高效的代码。")]),t._v(" "),n("h3",{attrs:{id:"中断栈帧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中断栈帧"}},[t._v("#")]),t._v(" 中断栈帧")]),t._v(" "),n("p",[t._v("常规函数调用时（使用 "),n("code",[t._v("call")]),t._v(" 指令），CPU 在跳转到目标函数前往栈压入返回地址。一旦函数返回（使用 "),n("code",[t._v("ret")]),t._v(" 指令），CPU 会把这个返回地址出栈，跳转到它那里。所以，常规函数调用的栈帧如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(509),alt:"函数栈帧"}})]),t._v(" "),n("p",[t._v("对于异常和中断处理函数，因为中断处理函数通常在不同上下文（栈指针，CPU 标识符等）运行，压入返回地址是不够的。CPU 会在中断出现时执行以下操作：")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("对齐栈指针")]),t._v("：任何指令都可能触发中断，所以栈指针的值是不定的。然而，一些 CPU 指令（例如，某些 SSE 指令）要求栈指针对齐到 16 字节，因此 CPU 在中断之前会执行对齐操作")]),t._v(" "),n("li",[n("strong",[t._v("切换栈")]),t._v("（某些情况下）：CPU 特权级别变化会触发栈切换，例如出现在用户模式程序的 CPU 异常。借助所谓的 "),n("em",[t._v("中断栈表")]),t._v("（下篇文章描述） 为特定中断配置栈切换也是可能的")]),t._v(" "),n("li",[n("strong",[t._v("压入旧的栈指针")]),t._v("：中断发生后、对齐操作前，CPU 会把栈指针（"),n("code",[t._v("rsp")]),t._v("）和栈段（"),n("code",[t._v("ss")]),t._v("）压入栈。这样就可以在中断处理函数返回后还原原本的栈指针了")]),t._v(" "),n("li",[n("strong",[t._v("压入并更新 "),n("code",[t._v("RFLAGS")]),t._v(" 寄存器")]),t._v("："),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/FLAGS_register",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("RFLAGS")]),n("OutboundLink")],1),t._v(" 寄存器保存多个控制和状态位。进入中断时，CPU 会改变某些位并压入旧值")]),t._v(" "),n("li",[n("strong",[t._v("压入指令指针")]),t._v("：跳转到中断处理函数前，CPU 会把指令指针（"),n("code",[t._v("rip")]),t._v("）和代码段（"),n("code",[t._v("cs")]),t._v("）压入栈。这可以类比到常规函数调用时压入返回地址")]),t._v(" "),n("li",[n("strong",[t._v("压入错误码")]),t._v("（为某些异常）：对于某些诸如缺页异常的特定异常，CPU 会往栈压入错误码，描述异常原因")]),t._v(" "),n("li",[n("strong",[t._v("调用中断处理函数")]),t._v("：CPU 从 IDT 的对应字段读入中断处理函数的地址和段描述符。然后把值加载到 "),n("code",[t._v("rip")]),t._v(" 和 "),n("code",[t._v("cs")]),t._v(" 寄存器后调用这个处理函数")])]),t._v(" "),n("p",[t._v("因此，一个中断栈帧的格式如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(510),alt:"中断栈帧"}})]),t._v(" "),n("p",[n("code",[t._v("x86_64")]),t._v(" 包中，中断栈帧用 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptStackFrame.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("InterruptStackFrame")]),n("OutboundLink")],1),t._v(" 结构体表示。它以 "),n("code",[t._v("&mut")]),t._v(" 的形式传给中断处理函数，可用于提取异常原因的更多信息。由于只有少数异常会压入错误码，所以这个结构体没有包含错误码字段。需要错误码的异常使用 ["),n("code",[t._v("HandlerFuncWithErrCode")]),t._v("] 函数类型，这个函数类型有一个额外的 "),n("code",[t._v("error_code")]),t._v(" 参数。")]),t._v(" "),n("h3",{attrs:{id:"底层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层"}},[t._v("#")]),t._v(" 底层")]),t._v(" "),n("p",[n("code",[t._v("x86-interrupt")]),t._v(" 调用风格是一个非常强大的抽象，隐藏了异常处理流程的几乎全部乱七八糟的细节。然而，有时了解一些背后的原理也不坏。以下是 "),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格负责的一些工作的概览：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("提取参数")]),t._v("：大多数调用风格期望参数会传入寄存器。这对异常处理函数来说是不可能的，因为我们在把他们备份到栈上前必须不能覆盖任何寄存器的值。"),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格知道参数已经在栈的特定偏移处")]),t._v(" "),n("li",[n("strong",[t._v("使用指令 "),n("code",[t._v("iretq")]),t._v(" 返回")]),t._v("：由于中断栈帧和常规函数的完全不同，我们无法用 "),n("code",[t._v("ret")]),t._v(" 指令从中断处理函数返回。必须使用的指令是 "),n("code",[t._v("iretq")])]),t._v(" "),n("li",[n("strong",[t._v("处理错误码")]),t._v("：某些异常压入的错误码使得情况要复杂很多。它改变了栈的对齐（继续看下一点）并且需要在返回前出栈。"),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格处理了所有这些复杂流程。然而，它依然不知道每种异常对应的处理函数，需要程序猿负责为每种异常使用正确的函数类型。好在，"),n("code",[t._v("x86_64")]),t._v(" 包定义的 "),n("code",[t._v("InterruptDescriptorTable")]),t._v(" 表确保了正确的函数类型")]),t._v(" "),n("li",[n("strong",[t._v("对齐栈")]),t._v("：某些指令（尤其是 SSE 指令）要求 16 字节对齐的栈。CPU 在每次异常触发时能够确保这一点，但是某些异常后续压入错误码时会再次破坏对齐结构。"),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格负责在这种情况下重新对齐栈。")])]),t._v(" "),n("p",[t._v("如需更多细节：我们在 "),n("a",{attrs:{href:"TODO"}},[t._v("文章末尾")]),t._v(" 贴了一系列使用 "),n("a",{attrs:{href:"https://github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("裸函数"),n("OutboundLink")],1),t._v(" 解释异常处理的文章链接。")]),t._v(" "),n("h2",{attrs:{id:"实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),n("p",[t._v("了解理论之后，现在可以动手在我们的内核处理 CPU 异常了。首先在 "),n("code",[t._v("src/interrupts.rs")]),t._v(" 文件创建一个新的中断模块，这个文件会创建一个 "),n("code",[t._v("init_idt")]),t._v(" 函数用于新建一个新的 "),n("code",[t._v("InterruptDescriptorTable")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/lib.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("interrupts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/interrupts.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("x86_64"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("structures"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" idt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("现在我们可以添加处理函数了。首先为 "),n("a",{attrs:{href:"https://wiki.osdev.org/Exceptions#Breakpoint",target:"_blank",rel:"noopener noreferrer"}},[t._v("断点异常"),n("OutboundLink")],1),t._v(" 添加处理函数。断点异常是测试异常处理的完美选择。它的唯一作用是断点异常指令 "),n("code",[t._v("int3")]),t._v(" 执行时临时暂停程序运行。")]),t._v(" "),n("p",[t._v("断点异常通常用于调试器：用户设置断点时，调试器用 "),n("code",[t._v("int3")]),t._v(" 指令覆盖对应的指令，使得 CPU 运行到这一行时抛出断点异常。用户想要继续执行程序时，调试器再次把 "),n("code",[t._v("int3")]),t._v(" 指令换回原始指令，使得程序继续执行。更多细节参见 "),n("a",{attrs:{href:"https://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints",target:"_blank",rel:"noopener noreferrer"}},[n("em",[t._v("调试是如何工作的")]),n("OutboundLink")],1),t._v(" 系列文章。")]),t._v(" "),n("p",[t._v("当前场景不需要覆写任何指令。只是想要断点指令执行时打印一条信息然后继续执行程序。所以，让我们创建一个简单的 "),n("code",[t._v("breakpoint_handler")]),t._v(" 函数，并将其添加到 IDT：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/interrupts.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("x86_64"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("structures"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptStackFrame")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),n("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" idt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_handler_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x86-interrupt"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("breakpoint_handler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    stack_frame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptStackFrame")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EXCEPTION: BREAKPOINT\\n{:#?}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stack_frame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("p",[t._v("我们的处理函数只是打印一条信息，并以美化风格打印中断栈帧。")]),t._v(" "),n("p",[t._v("尝试编译会触发以下错误：")]),t._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("E0658"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": x86-interrupt ABI is experimental and subject to change "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("see issue "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#40180)")]),t._v("\n  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" src/main.rs:53:1\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" / extern "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x86-interrupt"')]),t._v(" fn breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack_frame: "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mut InterruptStackFrame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("54")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     println"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EXCEPTION: BREAKPOINT'),n("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('{:#?}"')]),t._v(", stack_frame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("_^\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" help: "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#![feature(abi_x86_interrupt)] to the crate attributes to enable")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("错误原因为 "),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格仍然是不稳定的。不管三七二十一的话，我们必须显示在 "),n("code",[t._v("lib.rs")]),t._v(" 头部添加 "),n("code",[t._v("#![feature(abi_x86_interrupt)]")]),t._v(" 来启用它。")]),t._v(" "),n("h3",{attrs:{id:"加载-idt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载-idt"}},[t._v("#")]),t._v(" 加载 IDT")]),t._v(" "),n("p",[t._v("为了使 CPU 使用新的中断描述符表，我们需要通过 "),n("a",{attrs:{href:"https://www.felixcloutier.com/x86/lgdt:lidt",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("lidt")]),n("OutboundLink")],1),t._v(" 指令加载它。"),n("code",[t._v("x86_64")]),t._v(" 包的 "),n("code",[t._v("InterruptDescriptorTable")]),t._v(" 结构体提供一个 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptDescriptorTable.html#method.load",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("load")]),n("OutboundLink")],1),t._v(" 函数，用于实现这个目标。让我们试试看：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/interrupts.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" idt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_handler_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("现在编译会触发以下错误：")]),t._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("error: "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("idt"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" does not live long enough\n  --"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" src/interrupts/mod.rs:43:5\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     idt.load"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("     ^^^ does not live long enough\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" - borrowed value only lives "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" here\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" note: borrowed value must be valid "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the static lifetime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[n("code",[t._v("load")]),t._v(" 方法期望一个 "),n("code",[t._v("&'static self")]),t._v(" 的引用，这个引用在程序的整个运行时都是合法的。原因是除非加载一个不同的 IDT，否则每次中断时 CPU 都会访问这个表。所以，使用比 "),n("code",[t._v("'static")]),t._v(" 更短的生命期会触发释放后继续使用的 bug。")]),t._v(" "),n("p",[t._v("这正是目前事实上正在发生的问题。我们的 "),n("code",[t._v("idt")]),t._v(" 在栈上创建出来，所以只会在 "),n("code",[t._v("init")]),t._v(" 函数内有效。函数返回后，栈内存被释放掉用于其他函数，所以 CPU 可能会把随机的栈内存看做 IDT。好在 "),n("code",[t._v("InterruptDescriptorTable::load")]),t._v(" 方法把这个对生命期的要求编码在了函数的定义中，使得 Rust 编译器能够在编译时避免这个潜在的 bug。")]),t._v(" "),n("p",[t._v("为了解决这个问题，我们需要把 "),n("code",[t._v("idt")]),t._v(" 保存在生命期为 "),n("code",[t._v("'static")]),t._v(" 的位置。为此，可以借助 "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/boxed/struct.Box.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Box")]),n("OutboundLink")],1),t._v(" 在堆上分配一个 IDT，然后将其转化为一个 "),n("code",[t._v("'static")]),t._v(" 引用，但是我们还在编写一个内核，还没有堆这种说法。")]),t._v(" "),n("p",[t._v("另一种方法是把 IDT 保存为 "),n("code",[t._v("static")]),t._v(" 变量：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_handler_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("然后还是有问题：静态变量是不可变的，所以我们无法在 "),n("code",[t._v("init")]),t._v(" 函数中更改断点入口函数。我们可以使用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#accessing-or-modifying-a-mutable-static-variable",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("static mut")]),n("OutboundLink")],1),t._v(" 来解决这个问题：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsafe")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_handler_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("这种方法编译没问题，但是和习惯用法很不一样。"),n("code",[t._v("static mut")]),t._v(" 非常容易导致数据竞争，所以每次访问都需要用 "),n("a",{attrs:{href:"https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#unsafe-superpowers",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("unsafe")]),t._v(" 块"),n("OutboundLink")],1),t._v(" 包裹。")]),t._v(" "),n("h4",{attrs:{id:"救命的-lazy-statics"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#救命的-lazy-statics"}},[t._v("#")]),t._v(" 救命的 Lazy Statics")]),t._v(" "),n("p",[t._v("好在我们还有 "),n("code",[t._v("lazy_static")]),t._v(" 宏。这个宏不是在编译时确定 "),n("code",[t._v("static")]),t._v(" 变量值，而会在 "),n("code",[t._v("static")]),t._v(" 变量第一次被使用时初始化这个变量。因此，我们几乎可以在初始化代码块里面做任何事，甚至读取运行时的值。")]),t._v(" "),n("p",[t._v("在 "),n("RouterLink",{attrs:{to:"/2020/07/23/blog-os-03-vga-text-mode/#延迟初始化"}},[t._v("抽象 VGA 文本缓冲区")]),t._v(" 一文，我们已经导入了 "),n("code",[t._v("lazy_static")]),t._v("，所以可以直接使用 "),n("code",[t._v("lazy_static!")]),t._v(" 宏来创建静态的 IDT：")],1),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/interrupts.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("lazy_static"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),t._v("lazy_static"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("lazy_static!")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ref")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" idt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptDescriptorTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        idt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("breakpoint"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_handler_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("breakpoint_handler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        idt\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IDT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("p",[t._v("值得注意的是这个方案不需要 "),n("code",[t._v("unsafe")]),t._v(" 块。"),n("code",[t._v("lazy_static!")]),t._v(" 宏底层确实使用了 "),n("code",[t._v("unsafe")]),t._v("，但是抽象掉了这些细节并提供了安全的接口。")]),t._v(" "),n("h3",{attrs:{id:"运行它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行它"}},[t._v("#")]),t._v(" 运行它")]),t._v(" "),n("p",[t._v("让异常能够在我们内核正常工作的最后一步是在 "),n("code",[t._v("main.rs")]),t._v(" 调用 "),n("code",[t._v("init_idt")]),t._v(" 函数。我们没有直接调用 "),n("code",[t._v("init_idt")]),t._v("，而是在 "),n("code",[t._v("lib.rs")]),t._v(" 引入了通用的 "),n("code",[t._v("init")]),t._v(" 函数：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/lib.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("interrupts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("init_idt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("这个函数作为初始化例程的集中地，可以在 "),n("code",[t._v("main.rs")]),t._v("、"),n("code",[t._v("lib.rs")]),t._v(" 和集成测试等不同的 "),n("code",[t._v("_start")]),t._v(" 函数中共享。")]),t._v(" "),n("p",[t._v("现在可以更新 "),n("code",[t._v("main.rs")]),t._v(" 的 "),n("code",[t._v("_start")]),t._v(" 函数，调用 "),n("code",[t._v("init")]),t._v("，然后触发断点异常了：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/main.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[no_mangle]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World{}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("blog_os"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// invoke a breakpoint exception")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("x86_64"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("instructions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("interrupts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("int3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// as before")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It did not crash!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br")])]),n("p",[t._v("现在在 QEMU 内运行（使用 "),n("code",[t._v("cargo run")]),t._v("）可以看到如下输出：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(511),alt:"QEMU 显示  and the interrupt stack frame"}})]),t._v(" "),n("p",[t._v("跑通了！CPU 成功地调用了我们的断点处理函数，将信息打印到屏幕然后返回到 "),n("code",[t._v("_start")]),t._v(" 函数，后续打印出 "),n("code",[t._v("It did not crash!")]),t._v(" 消息。")]),t._v(" "),n("p",[t._v("可以看到中断栈帧告诉了我们异常触发时的具体指令和栈指针。这些信息对于调试非预期异常非常有用。")]),t._v(" "),n("h3",{attrs:{id:"添加测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加测试"}},[t._v("#")]),t._v(" 添加测试")]),t._v(" "),n("p",[t._v("让我们创建一个测试，确认上述代码会一直工作。首先，更新 "),n("code",[t._v("_start")]),t._v(" 函数调用 "),n("code",[t._v("init")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/lib.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Entry point for `cargo test`")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[no_mangle]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("_start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("记住，因为 Rust 会分别独立测试 "),n("code",[t._v("lib.rs")]),t._v(" 和 "),n("code",[t._v("main.rs")]),t._v("，所以运行 "),n("code",[t._v("cargo test --lib")]),t._v(" 时会用到这个 "),n("code",[t._v("_start")]),t._v(" 函数。这里我们需要在运行测试前调用 "),n("code",[t._v("init")]),t._v(" 配置好 IDT。")]),t._v(" "),n("p",[t._v("现在我们可以创建如下测试函数 "),n("code",[t._v("test_breakpoint_exception")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in src/interrupts.rs")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test_case]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("test_breakpoint_exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// invoke a breakpoint exception")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("x86_64"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("instructions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("interrupts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("int3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("测试调用 "),n("code",[t._v("int3")]),t._v(" 函数触发一个断点异常。通过检查异常处理后会继续执行，我们确认断点处理函数正常工作了。")]),t._v(" "),n("p",[t._v("尝试运行 "),n("code",[t._v("cargo test")]),t._v("（所有测试）或 "),n("code",[t._v("cargo test --lib")]),t._v("（只测试 "),n("code",[t._v("lib.rs")]),t._v(" 和它的模块）启动测试，可以看到以下输出：")]),t._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("blog_os::interrupts::test_breakpoint_exception"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ok"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h2",{attrs:{id:"细节过多"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#细节过多"}},[t._v("#")]),t._v(" 细节过多？")]),t._v(" "),n("p",[n("code",[t._v("x86-interrupt")]),t._v(" 调用风格和 "),n("a",{attrs:{href:"https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptDescriptorTable.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("InterruptDescriptorTable"),n("OutboundLink")],1),t._v(" 类型使得异常处理流程变得非常直接和容易。如果我们还是觉得细节太多并想要自学异常处理的所有底层细节的话，参见 "),n("RouterLink",{attrs:{to:"/_post/blog-os-05-cpu-exceptions/@/first-edition/extra/naked-exceptions/_index.html"}},[t._v("“使用裸函数处理异常”")]),t._v(" 系列文章。这系列文章讲解如何绕过 "),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格处理异常，并且创建自己的 IDT 类型。在 "),n("code",[t._v("x86-interrupt")]),t._v(" 调用风格和 "),n("code",[t._v("x86_64")]),t._v(" 包出现前，那个系列曾经是异常处理的主要文章。值得注意的是，系列文章基于这个博客的 "),n("RouterLink",{attrs:{to:"/_post/blog-os-05-cpu-exceptions/@/first-edition/_index.html"}},[t._v("第一版")]),t._v(" ，内容可能会过时。")],1),t._v(" "),n("h2",{attrs:{id:"下篇预告"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#下篇预告"}},[t._v("#")]),t._v(" 下篇预告")]),t._v(" "),n("p",[t._v("我们已经能成功地捕获第一个异常，并从中返回了！未捕获异常会触发无法恢复的 "),n("a",{attrs:{href:"https://wiki.osdev.org/Triple_Fault",target:"_blank",rel:"noopener noreferrer"}},[t._v("三级异常"),n("OutboundLink")],1),t._v("，导致系统重置，所以我们的下一个目标是确保捕获到所有异常。下一篇文章讲解如何通过捕获 "),n("a",{attrs:{href:"https://wiki.osdev.org/Double_Fault#Double_Fault",target:"_blank",rel:"noopener noreferrer"}},[t._v("二级异常"),n("OutboundLink")],1),t._v(" 来规避三级异常。")])])}),[],!1,null,null,null);s.default=e.exports}}]);