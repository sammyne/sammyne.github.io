(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{768:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("原文：https://dave.cheney.net/2019/06/10/constant-time")])]),s._v(" "),a("p",[s._v("这篇文章是对个人所最喜爱 Go 特性的 "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=pN_lm6QqHcw",target:"_blank",rel:"noopener noreferrer"}},[s._v("dotGO 2019演讲"),a("OutboundLink")],1),s._v(" 的延伸。")]),s._v(" "),a("blockquote",[a("p",[s._v("数字就是数字，一个 .go 源文件绝不会出现 "),a("code",[s._v("0x80ULL")]),a("br"),s._v("\n-- Rob Pike, "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=rKnDgT73v8s",target:"_blank",rel:"noopener noreferrer"}},[s._v("The Go Programming Language"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("这短句折射着 Go 的常量世界之美。如 Rob 所提及那样，我们也许对数字即常量习以为常了。这篇文章将会展示一些你所不了解的关于 Go "),a("code",[s._v("const")]),s._v(" 关键字的特性。")]),s._v(" "),a("h2",{attrs:{id:"为什么常量如此之美"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么常量如此之美"}},[s._v("#")]),s._v(" 为什么常量如此之美")]),s._v(" "),a("p",[s._v("这得从常量的美妙之处说起，首先涌上心头的是以下 3 件事：")]),s._v(" "),a("ul",[a("li",[a("em",[s._v("不变性")]),s._v("（immutability）：常量是 Go 里面仅有的、为数不多的表达不变性的方式")]),s._v(" "),a("li",[a("em",[s._v("明确性")]),s._v("（clarity）：常量让我们可以从代码提炼出魔幻数字，赋予他们名字和语义")]),s._v(" "),a("li",[a("em",[s._v("性能")]),s._v("（performance）：能够告知编译器某物不变是实现优化的关键，诸如 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Constant_folding",target:"_blank",rel:"noopener noreferrer"}},[s._v("常量折叠"),a("OutboundLink")],1),s._v("、常量传递、分支和不可达代码精简等都和这相关")])]),s._v(" "),a("h2",{attrs:{id:"一个难点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个难点"}},[s._v("#")]),s._v(" 一个难点")]),s._v(" "),a("p",[s._v("让我们小试身手，演示 Go 常量的强大：声明一个值为自然机器字的比特位数的常量。")]),s._v(" "),a("p",[a("s",[a("code",[s._v("unsafe.Sizeof")]),s._v("的返回的不是常量 "),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn1",id:"fnref1"}},[s._v("[1]")])]),s._v("。")]),s._v("  我们可以采用 "),a("code",[s._v("build")]),s._v(" 标签，手动地记录每个 Go 平台的自然字大小，或者可以采用以下表达式：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" uintSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这类遍布 Go 源码库的表达式的工作原理基本一致。如果当前平台是 64 位的，那么异或或对所有 0 取反的运算得到一个比特位全 1 的数，准确来讲是 64 个比特位。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果右移 32 位会得到低 32 位是 1 的数。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("将其和 1 进行与运算得到 1，")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00000000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11111111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("最后将 32 左移一位得到 64 "),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn2",id:"fnref2"}},[s._v("[2]")])])]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这是常量表达式的例子之一。这些运算都发生在编译时，所得结果自身是一个常量。如果瞅一眼"),a("code",[s._v("runtime")]),s._v("包，尤其关于垃圾回收部分，你会看到常量表达式如何基于代码编译的目标机器字的大小构造复杂的不变式。")]),s._v(" "),a("p",[s._v("可见，这操作有点少见，但大多数编译会在编译时为你执行常量折叠操作。")]),s._v(" "),a("h2",{attrs:{id:"常量也是值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量也是值"}},[s._v("#")]),s._v(" 常量也是值")]),s._v(" "),a("p",[s._v("Go 的常量是值，而每个值都具有类型。Go 允许用户自定义类型具有自己的方法。因此，一个常量值可以有自己的方法集。如果对此有所惊讶的话，我们来看一个也许习以为常的例子。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" timeout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Millisecond\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The timeout is"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 500ms")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上述例子中，无类型字面常量 500 乘于 "),a("code",[s._v("time.Millisecond")]),s._v("（本身是 "),a("code",[s._v("time.Duration")]),s._v(" 类型）。Go 的赋值规则是：除非显式声明，否则赋值符号左手边的类型由右手边的类型推断得到。500 是无类型常量，会被转换为 "),a("code",[s._v("time.Duration")]),s._v("，然后乘于常量 "),a("code",[s._v("time.Millisecond")]),s._v("。")]),s._v(" "),a("p",[s._v("综上，"),a("code",[s._v("timeout")]),s._v(" 是 "),a("code",[s._v("time.Duration")]),s._v(" 类型的常量，值为 500000000。")]),s._v(" "),a("p",[s._v("然而为什么 "),a("code",[s._v("fmt.Println")]),s._v(" 的打印结果是 500ms，而不是 500000000 呢？")]),s._v(" "),a("p",[s._v("因为 "),a("a",{attrs:{href:"https://godoc.org/time#Duration",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("time.Duration")]),a("OutboundLink")],1),s._v(" 有一个 "),a("a",{attrs:{href:"https://godoc.org/time#Duration.String",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("String")]),a("OutboundLink")],1),s._v(" 方法，使得任意 "),a("code",[s._v("time.Duration")]),s._v(" 类型，包括常量，都知道如何友好地展示自己。")]),s._v(" "),a("p",[s._v("既然你常量具有类型和类型可以声明方法，我们可以推断："),a("em",[s._v("常量值可实现接口")]),s._v("。事实上 "),a("code",[s._v("fmt.Println")]),s._v(" 就是这样一个不久前遇到的例子，它不要求值具有 "),a("code",[s._v("String")]),s._v(" 方法，而是要求值实现 "),a("code",[s._v("Stringer")]),s._v(" 接口。")]),s._v(" "),a("p",[s._v("接下来聊聊这个特性可以如何帮助优化代码。在那之前，先稍微离题谈一下单例模式。")]),s._v(" "),a("h2",{attrs:{id:"单例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[s._v("#")]),s._v(" 单例")]),s._v(" "),a("p",[s._v("无论是 Go 还是其他语言，我都不是单例模式的粉丝。单例模式加大了测试难度且在不同包之间引入不必要的耦合。个人认为：单例模式通常不是用于创建某物的唯一实例，而是开辟空间用于协调注册事宜。"),a("code",[s._v("net/http.DefaultServeMux")]),s._v(" 就是这么一个优秀样例。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" http\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// DefaultServeMux is the default ServeMux used by Serve.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" DefaultServeMux "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("defaultServeMux\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" defaultServeMux ServeMux\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("code",[s._v("defaultServeMux")]),s._v(" 怎么看都不是单例，我们可以随便新建另外一个 "),a("code",[s._v("ServeMux")]),s._v("。事实上，"),a("code",[s._v("http")]),s._v(" 包为我们随意创建 "),a("code",[s._v("ServeMux")]),s._v(" 提供了一个辅助函数。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NewServeMux allocates and returns a new ServeMux.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewServeMux")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ServeMux "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ServeMux"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("http.DefaultServeMux")]),s._v("不是单例。然而，真正单例的情形是存在的，因为他们仅能表示唯一的事物。进程的文件描述符就是这么一个好样例；0、1 和 2 分别代表标准输入、标准输出和标准错误输出。")]),s._v(" "),a("p",[s._v("对它们来说，名字是次要的，1 总是表示标准输出，但文件描述符 1 永远只有一个。因此，以下两个运算是等价的：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[s._v("fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello dotGo\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nsyscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello dotGo\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们看一下 "),a("code",[s._v("os")]),s._v(" 包是如何定义 "),a("code",[s._v("Stdin")]),s._v("，"),a("code",[s._v("Stdout")]),s._v(" 和 "),a("code",[s._v("Stderr")]),s._v(" 的：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" os\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    Stdin  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Stdin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/dev/stdin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Stdout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/dev/stdout"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Stderr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Stderr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/dev/stderr"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这种声明方式存在几个问题：首先，它们的类型是 "),a("code",[s._v("*os.File")]),s._v("，不符合 "),a("code",[s._v("io.Reader")]),s._v(" 和 "),a("code",[s._v("io.Writer")]),s._v(" 接口。用户一致抱怨此设定使得替代它们变得困难。然而，想要替换这类变量的想法是我离题所谈想要表达的（反对的？）。程序一旦启动，我们能够安全地替换 "),a("code",[s._v("os.Stdout")]),s._v(" 的值而不引发数据竞态么？")]),s._v(" "),a("p",[s._v("我觉得此替换操作一般是不可行的。通常来讲，如果某个操作不是安全的，作为程序猿就不应该让用户有它是安全的错觉，"),a("a",{attrs:{href:"http://www.hyrumslaw.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("避免他们依赖这种行为"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("我们是否可以更改 "),a("code",[s._v("os.Stdout")]),s._v(" 和类似变量的定义，使得它们保持可监控的读写行为且保持不变呢？用变量就可以很容易实现这种想法。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" readfd "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r readfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" writefd "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("w writefd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buf "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" syscall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    Stdin  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("readfd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Stdout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("writefd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Stderr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("writefd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Stdout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("事实上，这项更改仅会引入一个标准库的编译错误 "),a("sup",{staticClass:"footnote-ref"},[a("a",{attrs:{href:"#fn3",id:"fnref3"}},[s._v("[3]")])]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"哨兵型错误值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哨兵型错误值"}},[s._v("#")]),s._v(" 哨兵型错误值")]),s._v(" "),a("p",[s._v("哨兵型错误值是另一种看起来像常量，而实际不是的变量。"),a("code",[s._v("io.EOF")]),s._v("、"),a("code",[s._v("sql.ErrNoRows")]),s._v(" 和 "),a("code",[s._v("crypto/x509.ErrUnsupportedAlgorithm")]),s._v(" 等都是哨兵型错误值。它们都可归类为"),a("em",[s._v("预期型")]),s._v("错误，且因为都是预期的，也期望得到我们的检查。")]),s._v(" "),a("p",[s._v("为了比较所得错误及其期望值，我们需要导入定义这个错误的包。根据定义，因为哨兵型错误是导出的公有变量，例如 "),a("code",[s._v("io")]),s._v(" 包等任何导入这个变量的代码都可以修改 "),a("code",[s._v("io.EOF")]),s._v(" 的值。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" nelson\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"io"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// haha!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这个稍后会再提及。已知 "),a("code",[s._v("io.EOF")]),s._v(" 的名字，我们可以导入声明它的包，这对将其与我们的错误值比较来说是必须的，而一旦导入，这个错误值就可以被修改。历史传统和碰运气的想法不鼓励这样编码，但是技术上限制不了这种行为。")]),s._v(" "),a("p",[s._v("替换 "),a("code",[s._v("io.EOF")]),s._v(" 基本上会被立即发现。但是替换少用的哨兵型错误值会触发一些有趣的边际效应。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" innocent\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"crypto/rsa"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ErrVerification "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 🤔")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如果你期望竞态检查器能够发现如此骚操作的话，我建议你和那些编写 testing 框架时替换掉 "),a("code",[s._v("os.Stdout")]),s._v(" 而不惊动竞态检查器的老哥聊一聊。")]),s._v(" "),a("h2",{attrs:{id:"可互换性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可互换性"}},[s._v("#")]),s._v(" 可互换性")]),s._v(" "),a("p",[s._v("再离题一会，谈一下常量的最重要性质。常量不仅不可变，使得我们不能覆写它们的声明是不够的，它们还是"),a("strong",[s._v("可互换的")]),s._v("。如此重要的限制并没有得到应有的关注。")]),s._v(" "),a("p",[s._v("可互换是等同的意思。钱就是体现可互换型的好例子。现在你借我 10 美元，回头我还你。作为金融手段常规操作，你给我了一张 10 美元的支票，我还你的是 10 张 1 元美钞。可互换的事物在定义上是等同的，而等同是有助于编程的强大手段之一。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" myEOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// io/io.go line 38")]),s._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("myEOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EOF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("暂且不说坏人对代码库的影响，哨兵型错误的最大挑战在设计时它们表现为单例而不是常量。即使遵循"),a("code",[s._v("io")]),s._v("包完全一致的流程创建我们的 "),a("code",[s._v("EOF")]),s._v(" 值，"),a("code",[s._v("myEOF")]),s._v(" 和 "),a("code",[s._v("io.EOF")]),s._v(" 也是不等的。"),a("code",[s._v("myEOF")]),s._v(" 和 "),a("code",[s._v("io.EOF")]),s._v(" 不可互换，替代彼此。程序会发现这个不同点。")]),s._v(" "),a("p",[s._v("在没有保证不可变性、可互换性和等价性的前提下，Go 的哨兵型错误不是常量表达式的事实会引发一系列奇怪的现象。但是如果它们是常量呢？")]),s._v(" "),a("h2",{attrs:{id:"常量型错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量型错误"}},[s._v("#")]),s._v(" 常量型错误")]),s._v(" "),a("p",[s._v("理想的哨兵型错误应该表现为常量，不可变且可互换。回顾一下 Go 的内置 "),a("code",[s._v("error")]),s._v(" 接口的工作原理。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("error")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("任何具有 "),a("code",[s._v("Error() string")]),s._v(" 方法的类型都满足 "),a("code",[s._v("error")]),s._v(" 接口，具体包括用户自定义类型、"),a("code",[s._v("string")]),s._v(" 等基本类型的派生类型和常量字符串等。基于上述背景，看一下以下 "),a("code",[s._v("error")]),s._v(" 实现：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Error "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这个错误类型可用作常量表达式：")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("不同于作为结构体的 "),a("code",[s._v("error.errorString")]),s._v("，紧凑的结构体字面量初始值并不是也不能作为一个常量表达式。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" err2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("errorString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译失败")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("而刚才定义的 "),a("code",[s._v("Error")]),s._v(" 类型不是变量，它们是不可变的。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nerr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译失败")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("而且两个内容一致的字符串常量是恒等的。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),s._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这也就意味着派生于 string 的类型的两个相同内容的常量也是相等的。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Error "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" err1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" err2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" err2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("换句话讲，相等的常量 "),a("code",[s._v("Error")]),s._v(" 值是一样的，就像字面常量 1 和其他任意字面常量 1 相等。")]),s._v(" "),a("p",[s._v("现在基本组件在手，我们可以创建类似 "),a("code",[s._v("io.EOF")]),s._v(" 和 "),a("code",[s._v("rsa.ErrVerfication")]),s._v(" 的、不可变的、可互换的常量型哨兵型错误了。")]),s._v(" "),a("div",{staticClass:"language-go line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" git diff\ndiff "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("git a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v("\nindex "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2010770e6")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".355653")]),s._v("b4b8 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100644")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("go")]),s._v("\n@@ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" @@ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ErrShortBuffer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"short buffer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If the EOF occurs unexpectedly in a structured data stream,")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the appropriate error is either ErrUnexpectedEOF or some other error")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// giving more detail.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" EOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" EOF "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ioError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"EOF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" ioError "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e ioError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上述变更也许有点过度使用 Go 1 的规范，但是没有明文规定我们不能在自己写的包里面采用这种常量错误模式。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("Go 的常量牛逼。仅看到它们的不变性的话，会错过很多有趣的东西。Go 的常量有助于编写更加正确且更加难以误用的程序。")]),s._v(" "),a("p",[s._v("今天本文列举了数字型常量外的3种使用常量方式。")]),s._v(" "),a("p",[s._v("接下来就看你表现了，期待你对这些想法的拓展哟~")]),s._v(" "),a("h2",{attrs:{id:"相关博文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关博文"}},[s._v("#")]),s._v(" 相关博文")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://dave.cheney.net/2016/04/07/constant-errors",target:"_blank",rel:"noopener noreferrer"}},[s._v("常量型错误"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://dave.cheney.net/2014/12/24/inspecting-errors",target:"_blank",rel:"noopener noreferrer"}},[s._v("监控错误"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://dave.cheney.net/2017/06/11/go-without-package-scoped-variables",target:"_blank",rel:"noopener noreferrer"}},[s._v("Go，没有包级别的变量话"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully",target:"_blank",rel:"noopener noreferrer"}},[s._v("检查完错误之余别忘优雅地处理它们"),a("OutboundLink")],1)])]),s._v(" "),a("hr",{staticClass:"footnotes-sep"}),s._v(" "),a("section",{staticClass:"footnotes"},[a("ol",{staticClass:"footnotes-list"},[a("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[a("p",[s._v("几个评审人提醒我这是不对的。"),a("code",[s._v("unsafe.Sizeof")]),s._v(" 是常量表达式。为我的不准确表达抱歉= = "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[s._v("↩︎")])])]),s._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn2"}},[a("p",[s._v("32 比特的字大小计算就留给您小试身手吧 "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref2"}},[s._v("↩︎")])])]),s._v(" "),a("li",{staticClass:"footnote-item",attrs:{id:"fn3"}},[a("p",[s._v("讽刺的是，没能这样做的正是 "),a("code",[s._v("testing")]),s._v(" 包，采用了本节所警告的替换 "),a("a",{staticClass:"footnote-backref",attrs:{href:"#fnref3"}},[s._v("↩︎")])])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);