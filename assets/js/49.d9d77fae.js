(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{702:function(s,t,n){s.exports=n.p+"assets/img/optee-arch.8a29cd41.png"},835:function(s,t,n){"use strict";n.r(t);var a=n(6),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("本教程是用的是 3.12.0 版本的 "),a("a",{attrs:{href:"https://github.com/OP-TEE/optee_os/tree/3.12.0",target:"_blank",rel:"noopener noreferrer"}},[s._v("optee"),a("OutboundLink")],1),s._v("，运行环境为 QEMU 虚拟的 ARMv8 架构。")])]),s._v(" "),a("p",[s._v("二级厂商实现自有功能时，需要添加自己的 TA 和 CA 接口。当 CA 接口需要提供给应用调用的时候，一般做法是在 framework 中建立特定的 service，由 service 调用 CA 接口。同时建立对应的 client 部分，与 service 部分通过 Binder 的方式进行通信触发 CA 接口调用的操作。而对于应用，开发者会将 client 部分提供的接口以 JNI 的方式进行封装暴露给上层应用调用。")]),s._v(" "),a("p",[s._v("本文负责理清以下问题")]),s._v(" "),a("ul",[a("li",[s._v("当上层应用调用封装好的 JNI 接口之后，CA 接口是如何通知特定的 TA 执行特定操作的呢？")]),s._v(" "),a("li",[s._v("CA 与 TA 之间的数据是如何传递的呢？")]),s._v(" "),a("li",[s._v("cortex 的状态是如何切换的呢？")])]),s._v(" "),a("p",[s._v("本文将详细讲解一次 CA 接口调用的完整流程（不讨论 FIQ 和 IRQ 的情况，只讨论借助 SMC 指令跳转到 TEE 的情形）。")]),s._v(" "),a("h2",{attrs:{id:"_1-系统层面关系图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-系统层面关系图"}},[s._v("#")]),s._v(" 1. 系统层面关系图")]),s._v(" "),a("p",[s._v("下图为层面结构图：")]),s._v(" "),a("p",[a("img",{attrs:{src:n(702),alt:""}})]),s._v(" "),a("p",[s._v("CA 接口处于用户空间，整个调用过程需要经过内核空间、linux 驱动、Monitor 态中断处理、TEE OS 内核、TEE 用户空间。")]),s._v(" "),a("h2",{attrs:{id:"_2-用户空间到内核空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-用户空间到内核空间"}},[s._v("#")]),s._v(" 2. 用户空间到内核空间")]),s._v(" "),a("p",[s._v("用户空间调用 CA 接口触发系统调用，陷入内核态，进入内核空间，然后根据传入的参数，找到对应的 TEE 驱动，整个过程的过程大致如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+--------------------------------+\n| +-------------------+          |\n| |        API        |  用户态   | \n| +---------+---------+          |\n|           |                    |\n|           |                    |\n|           v                    |\n| +---------+---------+          |\n| |       glibc       |          |\n| +---------+---------+          |\n|           |                    |\n|           |                    |\n|           v                    |\n| +---------+-----------------+  |\n| |     __syscall             |  |\n| | (触发 linux 内核注册的软中断)|  |\n| +---------------------------+  |\n+------------|-------------------+\n             |\n             |\n+------------|-------------------+\n| +----------v------------+      |\n| | 系统调用软中断的响应函数  |      |\n| +---------+-----+------++      |\n|           |                    |\n|           |     内核态          | \n|           v                    |\n| +---------+-----+----+         |\n| |  查看系统调用表，     |         |\n| | 找到对应的系统调用    |         |\n| +---------+----+-----+         |\n|           |                    |\n|           |                    |\n|           v                    |\n| +---------+----------------+   |\n| | 查找 TEE 驱动并调用对应操作  |   |\n| +--------------------------+   | \n+--------------------------------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("关于该部分更加详细的内容，例如：软中断如何注册到内核，系统调用的定义等请自行查阅系统调用和驱动的相关资料。")]),s._v(" "),a("h2",{attrs:{id:"_3-tee-驱动到-monitor-态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tee-驱动到-monitor-态"}},[s._v("#")]),s._v(" 3. TEE 驱动到 monitor 态")]),s._v(" "),a("p",[s._v("TEE 的驱动最终会调用 "),a("code",[s._v("SMC")]),s._v(" 这条汇编指令来实现与 OP-TEE 的通信。"),a("code",[s._v("SMC")]),s._v(" 汇编指令触发 SMC 软中断。该软中断的处理在Cortex 的 Monitor 态进行。随着 ARM 提供 ATF（ARM trust firmware），SMC 的软中断具体处理函数在 ATF 被实现。该软中断会根据发送指令是属于安全侧请求还是非安全侧的请求来控制是将 Cortex 切换到安全世界态还是常规世界态。该切换动作在 ATF 的 SMC 中断处理函数实现。")]),s._v(" "),a("h2",{attrs:{id:"_4-tee-内核空间到-tee-用户空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-tee-内核空间到-tee-用户空间"}},[s._v("#")]),s._v(" 4. TEE 内核空间到 TEE 用户空间")]),s._v(" "),a("p",[s._v("当 SMC 中断处理函数完成将 Cortex 的状态切换到安全世界态以及相关参数的拷贝动作之后，TEE OS 将接管剩下的操作。TEE OS 首先获取 CA 端传递过来的数据，然后从数据中解析出 TA 的 UUID，然后查找对应的 TA image 是否被挂载到 TEE OS。")]),s._v(" "),a("p",[s._v("如果 TA image 尚未挂载，TEE OS 将会与常驻 linux 的 tee_supplicant 进程通信，从文件系统获取到 TA image 文件，并传递給 TEE OS，然后加载该 TA image。处理完整之后，TEE OS 会切换到 TEE 用户空间，并将 CA 传递过来的其他参数传给具体的 TA 进程。TA 进程获取到参数后，首先需要解除出参数的 "),a("code",[s._v("commondID")]),s._v("，根据 "),a("code",[s._v("commandID")]),s._v(" 执行具体操作。")]),s._v(" "),a("p",[s._v("TEE OS 在加载 TA image 的时候会验证 TA image 的签名合法性。上述步骤的大致流程图如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("+---------------------+          +----------------+\n|         SMC         |          |   file system  |\n+----------+----------+          +----+-----+-----+\n           |                          |     ^\n           |                          |     |\n           v                          v     |\n+----------+----------+          +----+-----+-----+\n|        TEE OS       +<---------+ TEE supplicant |\n+----------+----------+          +---------+------+\n           |                               ^\n           |                               |\n           v                               |\n+----------+-----------+                   |\n| If TA image is ready +------N------------+\n+----------+-----------+\n           |\n           Y\n           |\n           v\n+----------+-----------+\n| TA image handle      |\n+----------------------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("一次完整的 CA 调用过程会依次调用 "),a("code",[s._v("InitializeContext")]),s._v("、"),a("code",[s._v("OpenSession")]),s._v("、"),a("code",[s._v("InvokeCommand")]),s._v("、"),a("code",[s._v("Close Session")]),s._v(" 和 "),a("code",[s._v("FinalizeContext")]),s._v(" 等操作，所以上图只是大致流程，详细部分将会在后续文章逐步讲解。")]),s._v(" "),a("h2",{attrs:{id:"_5-gp-规定的-ca-端接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-gp-规定的-ca-端接口"}},[s._v("#")]),s._v(" 5. GP 规定的 CA 端接口")]),s._v(" "),a("p",[s._v("GP 规定的 CA 端接口较少，主要的是以下 5 个接口如下：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"right"}},[s._v("接口")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"right"}},[s._v("TEEC_InitializeContext")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("初始化 TEE 上下文，完成启动 TEE 驱动，建立与 TEE 之间的会话上下文")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[s._v("TEEC_OpenSession")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("建立 CA 与 TA 之间的会话窗口")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[s._v("TEEC_InvokeCommand")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("请求 TA 执行具体操作")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[s._v("TEEC_CloseSession")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("关闭 CA 与 TA 之间的会话窗口")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[s._v("TEEC_FinalizeContext")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("清空会话上下文")])])])]),s._v(" "),a("h2",{attrs:{id:"参考文献"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://icyshuai.blog.csdn.net/article/details/71697371",target:"_blank",rel:"noopener noreferrer"}},[s._v("OP-TEE中CA接口调用的完整流程----系统各层面关系"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);